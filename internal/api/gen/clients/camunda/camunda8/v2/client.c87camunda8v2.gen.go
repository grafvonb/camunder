// Package c87camunda8v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package c87camunda8v2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PartitionInfoRole.
const (
	FOLLOWER PartitionInfoRole = "FOLLOWER"
	INACTIVE PartitionInfoRole = "INACTIVE"
	LEADER   PartitionInfoRole = "LEADER"
)

// BrokerInfo defines model for BrokerInfo.
type BrokerInfo struct {
	Address    *string          `json:"address,omitempty"`
	NodeId     *int             `json:"nodeId,omitempty"`
	Partitions *[]PartitionInfo `json:"partitions,omitempty"`
}

// CancelProcessInstanceRequest defines model for CancelProcessInstanceRequest.
type CancelProcessInstanceRequest struct {
	// OperationReference A user-chosen reference key that will be part of all records resulting from this operation. Must be > 0 if provided.
	OperationReference *int64 `json:"operationReference,omitempty"`
}

// PartitionInfo defines model for PartitionInfo.
type PartitionInfo struct {
	PartitionId *int               `json:"partitionId,omitempty"`
	Role        *PartitionInfoRole `json:"role,omitempty"`
}

// PartitionInfoRole defines model for PartitionInfo.Role.
type PartitionInfoRole string

// Rfc7807Problem RFC 7807 Problem Details object.
type Rfc7807Problem struct {
	Detail               *string                `json:"detail,omitempty"`
	Instance             *string                `json:"instance,omitempty"`
	Status               *int32                 `json:"status,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Topology defines model for Topology.
type Topology struct {
	Brokers           *[]BrokerInfo `json:"brokers,omitempty"`
	ClusterSize       *int          `json:"clusterSize,omitempty"`
	PartitionsCount   *int          `json:"partitionsCount,omitempty"`
	ReplicationFactor *int          `json:"replicationFactor,omitempty"`
}

// PinInternalClockAlphaJSONBody defines parameters for PinInternalClockAlpha.
type PinInternalClockAlphaJSONBody struct {
	Timestamp *float32 `json:"timestamp,omitempty"`
}

// EvaluateDecisionJSONBody defines parameters for EvaluateDecision.
type EvaluateDecisionJSONBody struct {
	DecisionDefinitionKey *float32                `json:"decisionDefinitionKey,omitempty"`
	TenantId              *string                 `json:"tenantId,omitempty"`
	Variables             *map[string]interface{} `json:"variables,omitempty"`
}

// QueryDecisionDefinitionsAlphaJSONBody defines parameters for QueryDecisionDefinitionsAlpha.
type QueryDecisionDefinitionsAlphaJSONBody struct {
	Filter *struct {
		DecisionKey               *float32 `json:"decisionKey,omitempty"`
		DecisionRequirementsKey   *float32 `json:"decisionRequirementsKey,omitempty"`
		DmnDecisionId             *string  `json:"dmnDecisionId,omitempty"`
		DmnDecisionName           *string  `json:"dmnDecisionName,omitempty"`
		DmnDecisionRequirementsId *string  `json:"dmnDecisionRequirementsId,omitempty"`
		TenantId                  *string  `json:"tenantId,omitempty"`
		Version                   *float32 `json:"version,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryDecisionInstancesAlphaJSONBody defines parameters for QueryDecisionInstancesAlpha.
type QueryDecisionInstancesAlphaJSONBody struct {
	Filter *struct {
		DecisionDefinitionId      *string  `json:"decisionDefinitionId,omitempty"`
		DecisionDefinitionKey     *float32 `json:"decisionDefinitionKey,omitempty"`
		DecisionDefinitionName    *string  `json:"decisionDefinitionName,omitempty"`
		DecisionDefinitionVersion *float32 `json:"decisionDefinitionVersion,omitempty"`
		EvaluationFailure         *string  `json:"evaluationFailure,omitempty"`
		Key                       *float32 `json:"key,omitempty"`
		ProcessDefinitionKey      *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey        *float32 `json:"processInstanceKey,omitempty"`
		TenantId                  *string  `json:"tenantId,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryDecisionRequirementsAlphaJSONBody defines parameters for QueryDecisionRequirementsAlpha.
type QueryDecisionRequirementsAlphaJSONBody struct {
	Filter *struct {
		DecisionRequirementsKey     *float32 `json:"decisionRequirementsKey,omitempty"`
		DmnDecisionRequirementsId   *string  `json:"dmnDecisionRequirementsId,omitempty"`
		DmnDecisionRequirementsName *string  `json:"dmnDecisionRequirementsName,omitempty"`
		TenantId                    *string  `json:"tenantId,omitempty"`
		Version                     *float32 `json:"version,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// CreateDocumentLinkJSONBody defines parameters for CreateDocumentLink.
type CreateDocumentLinkJSONBody struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// UpdateElementInstanceVariablesJSONBody defines parameters for UpdateElementInstanceVariables.
type UpdateElementInstanceVariablesJSONBody struct {
	Local              *bool                   `json:"local,omitempty"`
	OperationReference *float32                `json:"operationReference,omitempty"`
	Variables          *map[string]interface{} `json:"variables,omitempty"`
}

// QueryFlowNodeInstancesAlphaJSONBody defines parameters for QueryFlowNodeInstancesAlpha.
type QueryFlowNodeInstancesAlphaJSONBody struct {
	Filter *struct {
		FlowNodeId           *string  `json:"flowNodeId,omitempty"`
		FlowNodeInstanceKey  *float32 `json:"flowNodeInstanceKey,omitempty"`
		FlowNodeName         *string  `json:"flowNodeName,omitempty"`
		Incident             *bool    `json:"incident,omitempty"`
		IncidentKey          *float32 `json:"incidentKey,omitempty"`
		ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey   *float32 `json:"processInstanceKey,omitempty"`
		State                *string  `json:"state,omitempty"`
		TenantId             *string  `json:"tenantId,omitempty"`
		TreePath             *string  `json:"treePath,omitempty"`
		Type                 *string  `json:"type,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryIncidentsJSONBody defines parameters for QueryIncidents.
type QueryIncidentsJSONBody struct {
	Filter *struct {
		FlowNodeId           *string  `json:"flowNodeId,omitempty"`
		FlowNodeInstanceId   *string  `json:"flowNodeInstanceId,omitempty"`
		HasActiveOperation   *bool    `json:"hasActiveOperation,omitempty"`
		JobKey               *float32 `json:"jobKey,omitempty"`
		Key                  *float32 `json:"key,omitempty"`
		Message              *string  `json:"message,omitempty"`
		ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey   *float32 `json:"processInstanceKey,omitempty"`
		State                *string  `json:"state,omitempty"`
		TenantId             *string  `json:"tenantId,omitempty"`
		Type                 *string  `json:"type,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// ActivateJobsJSONBody defines parameters for ActivateJobs.
type ActivateJobsJSONBody struct {
	FetchVariable     *[]string `json:"fetchVariable,omitempty"`
	MaxJobsToActivate *float32  `json:"maxJobsToActivate,omitempty"`
	RequestTimeout    *float32  `json:"requestTimeout,omitempty"`
	TenantIds         *[]string `json:"tenantIds,omitempty"`
	Timeout           *float32  `json:"timeout,omitempty"`
	Type              *string   `json:"type,omitempty"`
	Worker            *string   `json:"worker,omitempty"`
}

// UpdateAJobJSONBody defines parameters for UpdateAJob.
type UpdateAJobJSONBody struct {
	Changeset *struct {
		Retries *float32 `json:"retries,omitempty"`
		Timeout *float32 `json:"timeout,omitempty"`
	} `json:"changeset,omitempty"`
}

// ReportErrorForJobJSONBody defines parameters for ReportErrorForJob.
type ReportErrorForJobJSONBody struct {
	ErrorCode *string `json:"errorCode,omitempty"`
}

// FailJobJSONBody defines parameters for FailJob.
type FailJobJSONBody struct {
	Retries      *float32 `json:"retries,omitempty"`
	RetryBackOff *float32 `json:"retryBackOff,omitempty"`
}

// CorrelateAMessageJSONBody defines parameters for CorrelateAMessage.
type CorrelateAMessageJSONBody struct {
	CorrelationKey *string                 `json:"correlationKey,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	TenantId       *string                 `json:"tenantId,omitempty"`
	Variables      *map[string]interface{} `json:"variables,omitempty"`
}

// PublishAMessageJSONBody defines parameters for PublishAMessage.
type PublishAMessageJSONBody struct {
	CorrelationKey *string                 `json:"correlationKey,omitempty"`
	MessageId      *string                 `json:"messageId,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	TenantId       *string                 `json:"tenantId,omitempty"`
	TimeToLive     *float32                `json:"timeToLive,omitempty"`
	Variables      *map[string]interface{} `json:"variables,omitempty"`
}

// CreateProcessInstanceJSONBody defines parameters for CreateProcessInstance.
type CreateProcessInstanceJSONBody struct {
	AwaitCompletion      *bool    `json:"awaitCompletion,omitempty"`
	BpmnProcessId        *string  `json:"bpmnProcessId,omitempty"`
	OperationReference   *float32 `json:"operationReference,omitempty"`
	ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
	RequestTimeout       *float32 `json:"requestTimeout,omitempty"`
	StartInstructions    *[]struct {
		ElementId *string `json:"elementId,omitempty"`
	} `json:"startInstructions,omitempty"`
	TenantId  *string                 `json:"tenantId,omitempty"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
	Version   *float32                `json:"version,omitempty"`
}

// QueryProcessInstancesAlphaJSONBody defines parameters for QueryProcessInstancesAlpha.
type QueryProcessInstancesAlphaJSONBody struct {
	Filter *struct {
		Key       *[]float32 `json:"key,omitempty"`
		Variables *[]struct {
			Eq   *map[string]interface{} `json:"eq,omitempty"`
			Gt   *map[string]interface{} `json:"gt,omitempty"`
			Gte  *map[string]interface{} `json:"gte,omitempty"`
			Lt   *map[string]interface{} `json:"lt,omitempty"`
			Lte  *map[string]interface{} `json:"lte,omitempty"`
			Name *string                 `json:"name,omitempty"`
		} `json:"variables,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// MigrateProcessInstanceJSONBody defines parameters for MigrateProcessInstance.
type MigrateProcessInstanceJSONBody struct {
	MappingInstructions *[]struct {
		SourceElementId *string `json:"sourceElementId,omitempty"`
		TargetElementId *string `json:"targetElementId,omitempty"`
	} `json:"mappingInstructions,omitempty"`
	OperationReference         *float32 `json:"operationReference,omitempty"`
	TargetProcessDefinitionKey *float32 `json:"targetProcessDefinitionKey,omitempty"`
}

// ModifyProcessInstanceJSONBody defines parameters for ModifyProcessInstance.
type ModifyProcessInstanceJSONBody struct {
	ActivateInstructions *[]struct {
		AncestorElementInstanceKey *float32 `json:"ancestorElementInstanceKey,omitempty"`
		ElementId                  *string  `json:"elementId,omitempty"`
		VariableInstructions       *[]struct {
			ScopeId   *string                 `json:"scopeId,omitempty"`
			Variables *map[string]interface{} `json:"variables,omitempty"`
		} `json:"variableInstructions,omitempty"`
	} `json:"activateInstructions,omitempty"`
	OperationReference    *float32 `json:"operationReference,omitempty"`
	TerminateInstructions *[]struct {
		ElementInstanceKey *float32 `json:"elementInstanceKey,omitempty"`
	} `json:"terminateInstructions,omitempty"`
}

// DeleteResourceJSONBody defines parameters for DeleteResource.
type DeleteResourceJSONBody struct {
	OperationReference *float32 `json:"operationReference,omitempty"`
}

// BroadcastSignalJSONBody defines parameters for BroadcastSignal.
type BroadcastSignalJSONBody struct {
	SignalName *string                 `json:"signalName,omitempty"`
	TenantId   *string                 `json:"tenantId,omitempty"`
	Variables  *map[string]interface{} `json:"variables,omitempty"`
}

// QueryUserTasksAlphaJSONBody defines parameters for QueryUserTasksAlpha.
type QueryUserTasksAlphaJSONBody interface{}

// UpdateAUserTaskJSONBody defines parameters for UpdateAUserTask.
type UpdateAUserTaskJSONBody struct {
	Action    *string `json:"action,omitempty"`
	Changeset *struct {
		CandidateGroups *[]string `json:"candidateGroups,omitempty"`
		CandidateUsers  *[]string `json:"candidateUsers,omitempty"`
		DueDate         *string   `json:"dueDate,omitempty"`
		FollowUpDate    *string   `json:"followUpDate,omitempty"`
	} `json:"changeset,omitempty"`
}

// AssignAUserTaskJSONBody defines parameters for AssignAUserTask.
type AssignAUserTaskJSONBody struct {
	Action        *string `json:"action,omitempty"`
	AllowOverride *bool   `json:"allowOverride,omitempty"`
	Assignee      *string `json:"assignee,omitempty"`
}

// CompleteAUserTaskJSONBody defines parameters for CompleteAUserTask.
type CompleteAUserTaskJSONBody struct {
	Action    *string                 `json:"action,omitempty"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// QueryUsersAlphaJSONBody defines parameters for QueryUsersAlpha.
type QueryUsersAlphaJSONBody struct {
	Filter *struct {
		Email    *string `json:"email,omitempty"`
		Name     *string `json:"name,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// PinInternalClockAlphaJSONRequestBody defines body for PinInternalClockAlpha for application/json ContentType.
type PinInternalClockAlphaJSONRequestBody PinInternalClockAlphaJSONBody

// EvaluateDecisionJSONRequestBody defines body for EvaluateDecision for application/json ContentType.
type EvaluateDecisionJSONRequestBody EvaluateDecisionJSONBody

// QueryDecisionDefinitionsAlphaJSONRequestBody defines body for QueryDecisionDefinitionsAlpha for application/json ContentType.
type QueryDecisionDefinitionsAlphaJSONRequestBody QueryDecisionDefinitionsAlphaJSONBody

// QueryDecisionInstancesAlphaJSONRequestBody defines body for QueryDecisionInstancesAlpha for application/json ContentType.
type QueryDecisionInstancesAlphaJSONRequestBody QueryDecisionInstancesAlphaJSONBody

// QueryDecisionRequirementsAlphaJSONRequestBody defines body for QueryDecisionRequirementsAlpha for application/json ContentType.
type QueryDecisionRequirementsAlphaJSONRequestBody QueryDecisionRequirementsAlphaJSONBody

// CreateDocumentLinkJSONRequestBody defines body for CreateDocumentLink for application/json ContentType.
type CreateDocumentLinkJSONRequestBody CreateDocumentLinkJSONBody

// UpdateElementInstanceVariablesJSONRequestBody defines body for UpdateElementInstanceVariables for application/json ContentType.
type UpdateElementInstanceVariablesJSONRequestBody UpdateElementInstanceVariablesJSONBody

// QueryFlowNodeInstancesAlphaJSONRequestBody defines body for QueryFlowNodeInstancesAlpha for application/json ContentType.
type QueryFlowNodeInstancesAlphaJSONRequestBody QueryFlowNodeInstancesAlphaJSONBody

// QueryIncidentsJSONRequestBody defines body for QueryIncidents for application/json ContentType.
type QueryIncidentsJSONRequestBody QueryIncidentsJSONBody

// ActivateJobsJSONRequestBody defines body for ActivateJobs for application/json ContentType.
type ActivateJobsJSONRequestBody ActivateJobsJSONBody

// UpdateAJobJSONRequestBody defines body for UpdateAJob for application/json ContentType.
type UpdateAJobJSONRequestBody UpdateAJobJSONBody

// ReportErrorForJobJSONRequestBody defines body for ReportErrorForJob for application/json ContentType.
type ReportErrorForJobJSONRequestBody ReportErrorForJobJSONBody

// FailJobJSONRequestBody defines body for FailJob for application/json ContentType.
type FailJobJSONRequestBody FailJobJSONBody

// CorrelateAMessageJSONRequestBody defines body for CorrelateAMessage for application/json ContentType.
type CorrelateAMessageJSONRequestBody CorrelateAMessageJSONBody

// PublishAMessageJSONRequestBody defines body for PublishAMessage for application/json ContentType.
type PublishAMessageJSONRequestBody PublishAMessageJSONBody

// CreateProcessInstanceJSONRequestBody defines body for CreateProcessInstance for application/json ContentType.
type CreateProcessInstanceJSONRequestBody CreateProcessInstanceJSONBody

// QueryProcessInstancesAlphaJSONRequestBody defines body for QueryProcessInstancesAlpha for application/json ContentType.
type QueryProcessInstancesAlphaJSONRequestBody QueryProcessInstancesAlphaJSONBody

// CancelProcessInstanceJSONRequestBody defines body for CancelProcessInstance for application/json ContentType.
type CancelProcessInstanceJSONRequestBody = CancelProcessInstanceRequest

// MigrateProcessInstanceJSONRequestBody defines body for MigrateProcessInstance for application/json ContentType.
type MigrateProcessInstanceJSONRequestBody MigrateProcessInstanceJSONBody

// ModifyProcessInstanceJSONRequestBody defines body for ModifyProcessInstance for application/json ContentType.
type ModifyProcessInstanceJSONRequestBody ModifyProcessInstanceJSONBody

// DeleteResourceJSONRequestBody defines body for DeleteResource for application/json ContentType.
type DeleteResourceJSONRequestBody DeleteResourceJSONBody

// BroadcastSignalJSONRequestBody defines body for BroadcastSignal for application/json ContentType.
type BroadcastSignalJSONRequestBody BroadcastSignalJSONBody

// QueryUserTasksAlphaJSONRequestBody defines body for QueryUserTasksAlpha for application/json ContentType.
type QueryUserTasksAlphaJSONRequestBody QueryUserTasksAlphaJSONBody

// UpdateAUserTaskJSONRequestBody defines body for UpdateAUserTask for application/json ContentType.
type UpdateAUserTaskJSONRequestBody UpdateAUserTaskJSONBody

// AssignAUserTaskJSONRequestBody defines body for AssignAUserTask for application/json ContentType.
type AssignAUserTaskJSONRequestBody AssignAUserTaskJSONBody

// CompleteAUserTaskJSONRequestBody defines body for CompleteAUserTask for application/json ContentType.
type CompleteAUserTaskJSONRequestBody CompleteAUserTaskJSONBody

// QueryUsersAlphaJSONRequestBody defines body for QueryUsersAlpha for application/json ContentType.
type QueryUsersAlphaJSONRequestBody QueryUsersAlphaJSONBody

// Getter for additional properties for Rfc7807Problem. Returns the specified
// element and whether it was found
func (a Rfc7807Problem) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Rfc7807Problem
func (a *Rfc7807Problem) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Rfc7807Problem to handle AdditionalProperties
func (a *Rfc7807Problem) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Rfc7807Problem to handle AdditionalProperties
func (a Rfc7807Problem) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PinInternalClockAlphaWithBody request with any body
	PinInternalClockAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PinInternalClockAlpha(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetInternalClockAlpha request
	ResetInternalClockAlpha(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateDecisionWithBody request with any body
	EvaluateDecisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluateDecision(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionDefinitionsAlphaWithBody request with any body
	QueryDecisionDefinitionsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionDefinitionsAlpha(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionDefinitionXmlAlpha request
	GetDecisionDefinitionXmlAlpha(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionInstancesAlphaWithBody request with any body
	QueryDecisionInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionInstancesAlpha(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionRequirementsAlphaWithBody request with any body
	QueryDecisionRequirementsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionRequirementsAlpha(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeployResources request
	DeployResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDocumentLinkWithBody request with any body
	CreateDocumentLinkWithBody(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDocumentLink(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadDocument request
	UploadDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadMultipleDocuments request
	UploadMultipleDocuments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDocument request
	DeleteDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadDocument request
	DownloadDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateElementInstanceVariablesWithBody request with any body
	UpdateElementInstanceVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateElementInstanceVariables(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryFlowNodeInstancesAlphaWithBody request with any body
	QueryFlowNodeInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryFlowNodeInstancesAlpha(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryIncidentsWithBody request with any body
	QueryIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryIncidents(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentByKey request
	GetIncidentByKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request
	ResolveIncident(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateJobsWithBody request with any body
	ActivateJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActivateJobs(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAJobWithBody request with any body
	UpdateAJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAJob(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteJob request
	CompleteJob(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportErrorForJobWithBody request with any body
	ReportErrorForJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportErrorForJob(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FailJobWithBody request with any body
	FailJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FailJob(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusOfCamundaLicense request
	GetStatusOfCamundaLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrelateAMessageWithBody request with any body
	CorrelateAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrelateAMessage(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishAMessageWithBody request with any body
	PublishAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishAMessage(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProcessInstanceWithBody request with any body
	CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryProcessInstancesAlphaWithBody request with any body
	QueryProcessInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryProcessInstancesAlpha(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelProcessInstanceWithBody request with any body
	CancelProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelProcessInstance(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrateProcessInstanceWithBody request with any body
	MigrateProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MigrateProcessInstance(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyProcessInstanceWithBody request with any body
	ModifyProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyProcessInstance(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceContent request
	GetResourceContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceWithBody request with any body
	DeleteResourceWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteResource(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BroadcastSignalWithBody request with any body
	BroadcastSignalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BroadcastSignal(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterTopology request
	GetClusterTopology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUserTasksAlphaWithBody request with any body
	QueryUserTasksAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUserTasksAlpha(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAUserTaskWithBody request with any body
	UpdateAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAUserTask(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnassignAUserTask request
	UnassignAUserTask(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignAUserTaskWithBody request with any body
	AssignAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignAUserTask(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteAUserTaskWithBody request with any body
	CompleteAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteAUserTask(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUsersAlphaWithBody request with any body
	QueryUsersAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUsersAlpha(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PinInternalClockAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinInternalClockAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinInternalClockAlpha(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinInternalClockAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetInternalClockAlpha(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetInternalClockAlphaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateDecisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateDecisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateDecision(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateDecisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionDefinitionsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionDefinitionsAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionDefinitionsAlpha(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionDefinitionsAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionDefinitionXmlAlpha(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionDefinitionXmlAlphaRequest(c.Server, decisionKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionInstancesAlpha(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionRequirementsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionRequirementsAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionRequirementsAlpha(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionRequirementsAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLinkWithBody(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequestWithBody(c.Server, documentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLink(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequest(c.Server, documentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadDocumentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadMultipleDocuments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadMultipleDocumentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDocumentRequest(c.Server, documentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadDocumentRequest(c.Server, documentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElementInstanceVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElementInstanceVariablesRequestWithBody(c.Server, elementInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElementInstanceVariables(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElementInstanceVariablesRequest(c.Server, elementInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFlowNodeInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFlowNodeInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFlowNodeInstancesAlpha(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFlowNodeInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIncidents(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentByKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentByKeyRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncident(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateJobs(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAJob(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJob(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobRequest(c.Server, jobKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportErrorForJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportErrorForJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportErrorForJob(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportErrorForJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailJob(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusOfCamundaLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusOfCamundaLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrelateAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrelateAMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrelateAMessage(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrelateAMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishAMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishAMessage(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishAMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProcessInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProcessInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProcessInstancesAlpha(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProcessInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelProcessInstance(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateProcessInstance(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProcessInstance(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceContentRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequestWithBody(c.Server, resourceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResource(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequest(c.Server, resourceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastSignalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastSignalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastSignal(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastSignalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterTopology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterTopologyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserTasksAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserTasksAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserTasksAlpha(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserTasksAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAUserTask(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnassignAUserTask(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnassignAUserTaskRequest(c.Server, userTaskKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignAUserTask(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteAUserTask(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsersAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsersAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsersAlpha(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsersAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPinInternalClockAlphaRequest calls the generic PinInternalClockAlpha builder with application/json body
func NewPinInternalClockAlphaRequest(server string, body PinInternalClockAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPinInternalClockAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewPinInternalClockAlphaRequestWithBody generates requests for PinInternalClockAlpha with any type of body
func NewPinInternalClockAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetInternalClockAlphaRequest generates requests for ResetInternalClockAlpha
func NewResetInternalClockAlphaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateDecisionRequest calls the generic EvaluateDecision builder with application/json body
func NewEvaluateDecisionRequest(server string, body EvaluateDecisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluateDecisionRequestWithBody(server, "application/json", bodyReader)
}

// NewEvaluateDecisionRequestWithBody generates requests for EvaluateDecision with any type of body
func NewEvaluateDecisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/evaluation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryDecisionDefinitionsAlphaRequest calls the generic QueryDecisionDefinitionsAlpha builder with application/json body
func NewQueryDecisionDefinitionsAlphaRequest(server string, body QueryDecisionDefinitionsAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionDefinitionsAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionDefinitionsAlphaRequestWithBody generates requests for QueryDecisionDefinitionsAlpha with any type of body
func NewQueryDecisionDefinitionsAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecisionDefinitionXmlAlphaRequest generates requests for GetDecisionDefinitionXmlAlpha
func NewGetDecisionDefinitionXmlAlphaRequest(server string, decisionKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "decisionKey", runtime.ParamLocationPath, decisionKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/%s/xml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryDecisionInstancesAlphaRequest calls the generic QueryDecisionInstancesAlpha builder with application/json body
func NewQueryDecisionInstancesAlphaRequest(server string, body QueryDecisionInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionInstancesAlphaRequestWithBody generates requests for QueryDecisionInstancesAlpha with any type of body
func NewQueryDecisionInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryDecisionRequirementsAlphaRequest calls the generic QueryDecisionRequirementsAlpha builder with application/json body
func NewQueryDecisionRequirementsAlphaRequest(server string, body QueryDecisionRequirementsAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionRequirementsAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionRequirementsAlphaRequestWithBody generates requests for QueryDecisionRequirementsAlpha with any type of body
func NewQueryDecisionRequirementsAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-requirements/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeployResourcesRequest generates requests for DeployResources
func NewDeployResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDocumentLinkRequest calls the generic CreateDocumentLink builder with application/json body
func NewCreateDocumentLinkRequest(server string, documentId string, body CreateDocumentLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDocumentLinkRequestWithBody(server, documentId, "application/json", bodyReader)
}

// NewCreateDocumentLinkRequestWithBody generates requests for CreateDocumentLink with any type of body
func NewCreateDocumentLinkRequestWithBody(server string, documentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/document/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadDocumentRequest generates requests for UploadDocument
func NewUploadDocumentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadMultipleDocumentsRequest generates requests for UploadMultipleDocuments
func NewUploadMultipleDocumentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDocumentRequest generates requests for DeleteDocument
func NewDeleteDocumentRequest(server string, documentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadDocumentRequest generates requests for DownloadDocument
func NewDownloadDocumentRequest(server string, documentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateElementInstanceVariablesRequest calls the generic UpdateElementInstanceVariables builder with application/json body
func NewUpdateElementInstanceVariablesRequest(server string, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateElementInstanceVariablesRequestWithBody(server, elementInstanceKey, "application/json", bodyReader)
}

// NewUpdateElementInstanceVariablesRequestWithBody generates requests for UpdateElementInstanceVariables with any type of body
func NewUpdateElementInstanceVariablesRequestWithBody(server string, elementInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elementInstanceKey", runtime.ParamLocationPath, elementInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/element-instances/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryFlowNodeInstancesAlphaRequest calls the generic QueryFlowNodeInstancesAlpha builder with application/json body
func NewQueryFlowNodeInstancesAlphaRequest(server string, body QueryFlowNodeInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryFlowNodeInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryFlowNodeInstancesAlphaRequestWithBody generates requests for QueryFlowNodeInstancesAlpha with any type of body
func NewQueryFlowNodeInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flownode-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryIncidentsRequest calls the generic QueryIncidents builder with application/json body
func NewQueryIncidentsRequest(server string, body QueryIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryIncidentsRequestWithBody generates requests for QueryIncidents with any type of body
func NewQueryIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentByKeyRequest generates requests for GetIncidentByKey
func NewGetIncidentByKeyRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResolveIncidentRequest generates requests for ResolveIncident
func NewResolveIncidentRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s/resolution", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActivateJobsRequest calls the generic ActivateJobs builder with application/json body
func NewActivateJobsRequest(server string, body ActivateJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewActivateJobsRequestWithBody generates requests for ActivateJobs with any type of body
func NewActivateJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/activation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAJobRequest calls the generic UpdateAJob builder with application/json body
func NewUpdateAJobRequest(server string, jobKey string, body UpdateAJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewUpdateAJobRequestWithBody generates requests for UpdateAJob with any type of body
func NewUpdateAJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteJobRequest generates requests for CompleteJob
func NewCompleteJobRequest(server string, jobKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportErrorForJobRequest calls the generic ReportErrorForJob builder with application/json body
func NewReportErrorForJobRequest(server string, jobKey string, body ReportErrorForJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportErrorForJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewReportErrorForJobRequestWithBody generates requests for ReportErrorForJob with any type of body
func NewReportErrorForJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/error", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFailJobRequest calls the generic FailJob builder with application/json body
func NewFailJobRequest(server string, jobKey string, body FailJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFailJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewFailJobRequestWithBody generates requests for FailJob with any type of body
func NewFailJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/failure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusOfCamundaLicenseRequest generates requests for GetStatusOfCamundaLicense
func NewGetStatusOfCamundaLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCorrelateAMessageRequest calls the generic CorrelateAMessage builder with application/json body
func NewCorrelateAMessageRequest(server string, body CorrelateAMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCorrelateAMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewCorrelateAMessageRequestWithBody generates requests for CorrelateAMessage with any type of body
func NewCorrelateAMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/correlation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishAMessageRequest calls the generic PublishAMessage builder with application/json body
func NewPublishAMessageRequest(server string, body PublishAMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishAMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPublishAMessageRequestWithBody generates requests for PublishAMessage with any type of body
func NewPublishAMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/publication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateProcessInstanceRequest calls the generic CreateProcessInstance builder with application/json body
func NewCreateProcessInstanceRequest(server string, body CreateProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProcessInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProcessInstanceRequestWithBody generates requests for CreateProcessInstance with any type of body
func NewCreateProcessInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryProcessInstancesAlphaRequest calls the generic QueryProcessInstancesAlpha builder with application/json body
func NewQueryProcessInstancesAlphaRequest(server string, body QueryProcessInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryProcessInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryProcessInstancesAlphaRequestWithBody generates requests for QueryProcessInstancesAlpha with any type of body
func NewQueryProcessInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelProcessInstanceRequest calls the generic CancelProcessInstance builder with application/json body
func NewCancelProcessInstanceRequest(server string, processInstanceKey string, body CancelProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewCancelProcessInstanceRequestWithBody generates requests for CancelProcessInstance with any type of body
func NewCancelProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/cancellation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigrateProcessInstanceRequest calls the generic MigrateProcessInstance builder with application/json body
func NewMigrateProcessInstanceRequest(server string, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMigrateProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewMigrateProcessInstanceRequestWithBody generates requests for MigrateProcessInstance with any type of body
func NewMigrateProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/migration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyProcessInstanceRequest calls the generic ModifyProcessInstance builder with application/json body
func NewModifyProcessInstanceRequest(server string, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewModifyProcessInstanceRequestWithBody generates requests for ModifyProcessInstance with any type of body
func NewModifyProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/modification", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceContentRequest generates requests for GetResourceContent
func NewGetResourceContentRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteResourceRequest calls the generic DeleteResource builder with application/json body
func NewDeleteResourceRequest(server string, resourceKey string, body DeleteResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteResourceRequestWithBody(server, resourceKey, "application/json", bodyReader)
}

// NewDeleteResourceRequestWithBody generates requests for DeleteResource with any type of body
func NewDeleteResourceRequestWithBody(server string, resourceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/deletion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastSignalRequest calls the generic BroadcastSignal builder with application/json body
func NewBroadcastSignalRequest(server string, body BroadcastSignalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBroadcastSignalRequestWithBody(server, "application/json", bodyReader)
}

// NewBroadcastSignalRequestWithBody generates requests for BroadcastSignal with any type of body
func NewBroadcastSignalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signals/broadcast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterTopologyRequest generates requests for GetClusterTopology
func NewGetClusterTopologyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryUserTasksAlphaRequest calls the generic QueryUserTasksAlpha builder with application/json body
func NewQueryUserTasksAlphaRequest(server string, body QueryUserTasksAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUserTasksAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryUserTasksAlphaRequestWithBody generates requests for QueryUserTasksAlpha with any type of body
func NewQueryUserTasksAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAUserTaskRequest calls the generic UpdateAUserTask builder with application/json body
func NewUpdateAUserTaskRequest(server string, userTaskKey string, body UpdateAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewUpdateAUserTaskRequestWithBody generates requests for UpdateAUserTask with any type of body
func NewUpdateAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnassignAUserTaskRequest generates requests for UnassignAUserTask
func NewUnassignAUserTaskRequest(server string, userTaskKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignee", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignAUserTaskRequest calls the generic AssignAUserTask builder with application/json body
func NewAssignAUserTaskRequest(server string, userTaskKey string, body AssignAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewAssignAUserTaskRequestWithBody generates requests for AssignAUserTask with any type of body
func NewAssignAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteAUserTaskRequest calls the generic CompleteAUserTask builder with application/json body
func NewCompleteAUserTaskRequest(server string, userTaskKey string, body CompleteAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewCompleteAUserTaskRequestWithBody generates requests for CompleteAUserTask with any type of body
func NewCompleteAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUsersAlphaRequest calls the generic QueryUsersAlpha builder with application/json body
func NewQueryUsersAlphaRequest(server string, body QueryUsersAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUsersAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryUsersAlphaRequestWithBody generates requests for QueryUsersAlpha with any type of body
func NewQueryUsersAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PinInternalClockAlphaWithBodyWithResponse request with any body
	PinInternalClockAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error)

	PinInternalClockAlphaWithResponse(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error)

	// ResetInternalClockAlphaWithResponse request
	ResetInternalClockAlphaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetInternalClockAlphaResponse, error)

	// EvaluateDecisionWithBodyWithResponse request with any body
	EvaluateDecisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error)

	EvaluateDecisionWithResponse(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error)

	// QueryDecisionDefinitionsAlphaWithBodyWithResponse request with any body
	QueryDecisionDefinitionsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error)

	QueryDecisionDefinitionsAlphaWithResponse(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error)

	// GetDecisionDefinitionXmlAlphaWithResponse request
	GetDecisionDefinitionXmlAlphaWithResponse(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionXmlAlphaResponse, error)

	// QueryDecisionInstancesAlphaWithBodyWithResponse request with any body
	QueryDecisionInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error)

	QueryDecisionInstancesAlphaWithResponse(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error)

	// QueryDecisionRequirementsAlphaWithBodyWithResponse request with any body
	QueryDecisionRequirementsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error)

	QueryDecisionRequirementsAlphaWithResponse(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error)

	// DeployResourcesWithResponse request
	DeployResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeployResourcesResponse, error)

	// CreateDocumentLinkWithBodyWithResponse request with any body
	CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	CreateDocumentLinkWithResponse(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	// UploadDocumentWithResponse request
	UploadDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadDocumentResponse, error)

	// UploadMultipleDocumentsWithResponse request
	UploadMultipleDocumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadMultipleDocumentsResponse, error)

	// DeleteDocumentWithResponse request
	DeleteDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error)

	// DownloadDocumentWithResponse request
	DownloadDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DownloadDocumentResponse, error)

	// UpdateElementInstanceVariablesWithBodyWithResponse request with any body
	UpdateElementInstanceVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error)

	UpdateElementInstanceVariablesWithResponse(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error)

	// QueryFlowNodeInstancesAlphaWithBodyWithResponse request with any body
	QueryFlowNodeInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error)

	QueryFlowNodeInstancesAlphaWithResponse(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error)

	// QueryIncidentsWithBodyWithResponse request with any body
	QueryIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error)

	QueryIncidentsWithResponse(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error)

	// GetIncidentByKeyWithResponse request
	GetIncidentByKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error)

	// ResolveIncidentWithResponse request
	ResolveIncidentWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ActivateJobsWithBodyWithResponse request with any body
	ActivateJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error)

	ActivateJobsWithResponse(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error)

	// UpdateAJobWithBodyWithResponse request with any body
	UpdateAJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error)

	UpdateAJobWithResponse(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error)

	// CompleteJobWithResponse request
	CompleteJobWithResponse(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error)

	// ReportErrorForJobWithBodyWithResponse request with any body
	ReportErrorForJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error)

	ReportErrorForJobWithResponse(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error)

	// FailJobWithBodyWithResponse request with any body
	FailJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailJobResponse, error)

	FailJobWithResponse(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*FailJobResponse, error)

	// GetStatusOfCamundaLicenseWithResponse request
	GetStatusOfCamundaLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusOfCamundaLicenseResponse, error)

	// CorrelateAMessageWithBodyWithResponse request with any body
	CorrelateAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error)

	CorrelateAMessageWithResponse(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error)

	// PublishAMessageWithBodyWithResponse request with any body
	PublishAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error)

	PublishAMessageWithResponse(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error)

	// CreateProcessInstanceWithBodyWithResponse request with any body
	CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	// QueryProcessInstancesAlphaWithBodyWithResponse request with any body
	QueryProcessInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error)

	QueryProcessInstancesAlphaWithResponse(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error)

	// CancelProcessInstanceWithBodyWithResponse request with any body
	CancelProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error)

	CancelProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error)

	// MigrateProcessInstanceWithBodyWithResponse request with any body
	MigrateProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error)

	MigrateProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error)

	// ModifyProcessInstanceWithBodyWithResponse request with any body
	ModifyProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error)

	ModifyProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)

	// GetResourceContentWithResponse request
	GetResourceContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceContentResponse, error)

	// DeleteResourceWithBodyWithResponse request with any body
	DeleteResourceWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	DeleteResourceWithResponse(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	// BroadcastSignalWithBodyWithResponse request with any body
	BroadcastSignalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error)

	BroadcastSignalWithResponse(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error)

	// GetClusterTopologyWithResponse request
	GetClusterTopologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterTopologyResponse, error)

	// QueryUserTasksAlphaWithBodyWithResponse request with any body
	QueryUserTasksAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error)

	QueryUserTasksAlphaWithResponse(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error)

	// UpdateAUserTaskWithBodyWithResponse request with any body
	UpdateAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error)

	UpdateAUserTaskWithResponse(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error)

	// UnassignAUserTaskWithResponse request
	UnassignAUserTaskWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*UnassignAUserTaskResponse, error)

	// AssignAUserTaskWithBodyWithResponse request with any body
	AssignAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error)

	AssignAUserTaskWithResponse(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error)

	// CompleteAUserTaskWithBodyWithResponse request with any body
	CompleteAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error)

	CompleteAUserTaskWithResponse(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error)

	// QueryUsersAlphaWithBodyWithResponse request with any body
	QueryUsersAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error)

	QueryUsersAlphaWithResponse(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error)
}

type PinInternalClockAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PinInternalClockAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PinInternalClockAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetInternalClockAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetInternalClockAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetInternalClockAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateDecisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluateDecisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateDecisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionDefinitionsAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionDefinitionsAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionDefinitionsAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionDefinitionXmlAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDecisionDefinitionXmlAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionDefinitionXmlAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionRequirementsAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionRequirementsAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionRequirementsAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeployResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeployResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeployResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDocumentLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDocumentLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDocumentLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadMultipleDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadMultipleDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadMultipleDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateElementInstanceVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateElementInstanceVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateElementInstanceVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryFlowNodeInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryFlowNodeInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryFlowNodeInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentByKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ActivateJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportErrorForJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportErrorForJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportErrorForJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FailJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FailJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FailJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusOfCamundaLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusOfCamundaLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusOfCamundaLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrelateAMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CorrelateAMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrelateAMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishAMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishAMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishAMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryProcessInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryProcessInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryProcessInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelProcessInstanceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *Rfc7807Problem
	ApplicationproblemJSON404 *Rfc7807Problem
	ApplicationproblemJSON500 *Rfc7807Problem
}

// Status returns HTTPResponse.Status
func (r CancelProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrateProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MigrateProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrateProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastSignalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BroadcastSignalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastSignalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterTopologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Topology
}

// Status returns HTTPResponse.Status
func (r GetClusterTopologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterTopologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUserTasksAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryUserTasksAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUserTasksAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnassignAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnassignAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnassignAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUsersAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryUsersAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUsersAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PinInternalClockAlphaWithBodyWithResponse request with arbitrary body returning *PinInternalClockAlphaResponse
func (c *ClientWithResponses) PinInternalClockAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error) {
	rsp, err := c.PinInternalClockAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinInternalClockAlphaResponse(rsp)
}

func (c *ClientWithResponses) PinInternalClockAlphaWithResponse(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error) {
	rsp, err := c.PinInternalClockAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinInternalClockAlphaResponse(rsp)
}

// ResetInternalClockAlphaWithResponse request returning *ResetInternalClockAlphaResponse
func (c *ClientWithResponses) ResetInternalClockAlphaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetInternalClockAlphaResponse, error) {
	rsp, err := c.ResetInternalClockAlpha(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetInternalClockAlphaResponse(rsp)
}

// EvaluateDecisionWithBodyWithResponse request with arbitrary body returning *EvaluateDecisionResponse
func (c *ClientWithResponses) EvaluateDecisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error) {
	rsp, err := c.EvaluateDecisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateDecisionResponse(rsp)
}

func (c *ClientWithResponses) EvaluateDecisionWithResponse(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error) {
	rsp, err := c.EvaluateDecision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateDecisionResponse(rsp)
}

// QueryDecisionDefinitionsAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionDefinitionsAlphaResponse
func (c *ClientWithResponses) QueryDecisionDefinitionsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error) {
	rsp, err := c.QueryDecisionDefinitionsAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionDefinitionsAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionDefinitionsAlphaWithResponse(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error) {
	rsp, err := c.QueryDecisionDefinitionsAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionDefinitionsAlphaResponse(rsp)
}

// GetDecisionDefinitionXmlAlphaWithResponse request returning *GetDecisionDefinitionXmlAlphaResponse
func (c *ClientWithResponses) GetDecisionDefinitionXmlAlphaWithResponse(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionXmlAlphaResponse, error) {
	rsp, err := c.GetDecisionDefinitionXmlAlpha(ctx, decisionKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionDefinitionXmlAlphaResponse(rsp)
}

// QueryDecisionInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionInstancesAlphaResponse
func (c *ClientWithResponses) QueryDecisionInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error) {
	rsp, err := c.QueryDecisionInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionInstancesAlphaWithResponse(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error) {
	rsp, err := c.QueryDecisionInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionInstancesAlphaResponse(rsp)
}

// QueryDecisionRequirementsAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionRequirementsAlphaResponse
func (c *ClientWithResponses) QueryDecisionRequirementsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error) {
	rsp, err := c.QueryDecisionRequirementsAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionRequirementsAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionRequirementsAlphaWithResponse(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error) {
	rsp, err := c.QueryDecisionRequirementsAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionRequirementsAlphaResponse(rsp)
}

// DeployResourcesWithResponse request returning *DeployResourcesResponse
func (c *ClientWithResponses) DeployResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeployResourcesResponse, error) {
	rsp, err := c.DeployResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployResourcesResponse(rsp)
}

// CreateDocumentLinkWithBodyWithResponse request with arbitrary body returning *CreateDocumentLinkResponse
func (c *ClientWithResponses) CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLinkWithBody(ctx, documentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

func (c *ClientWithResponses) CreateDocumentLinkWithResponse(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLink(ctx, documentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

// UploadDocumentWithResponse request returning *UploadDocumentResponse
func (c *ClientWithResponses) UploadDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadDocumentResponse, error) {
	rsp, err := c.UploadDocument(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadDocumentResponse(rsp)
}

// UploadMultipleDocumentsWithResponse request returning *UploadMultipleDocumentsResponse
func (c *ClientWithResponses) UploadMultipleDocumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadMultipleDocumentsResponse, error) {
	rsp, err := c.UploadMultipleDocuments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadMultipleDocumentsResponse(rsp)
}

// DeleteDocumentWithResponse request returning *DeleteDocumentResponse
func (c *ClientWithResponses) DeleteDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error) {
	rsp, err := c.DeleteDocument(ctx, documentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDocumentResponse(rsp)
}

// DownloadDocumentWithResponse request returning *DownloadDocumentResponse
func (c *ClientWithResponses) DownloadDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DownloadDocumentResponse, error) {
	rsp, err := c.DownloadDocument(ctx, documentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadDocumentResponse(rsp)
}

// UpdateElementInstanceVariablesWithBodyWithResponse request with arbitrary body returning *UpdateElementInstanceVariablesResponse
func (c *ClientWithResponses) UpdateElementInstanceVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error) {
	rsp, err := c.UpdateElementInstanceVariablesWithBody(ctx, elementInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElementInstanceVariablesResponse(rsp)
}

func (c *ClientWithResponses) UpdateElementInstanceVariablesWithResponse(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error) {
	rsp, err := c.UpdateElementInstanceVariables(ctx, elementInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElementInstanceVariablesResponse(rsp)
}

// QueryFlowNodeInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryFlowNodeInstancesAlphaResponse
func (c *ClientWithResponses) QueryFlowNodeInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error) {
	rsp, err := c.QueryFlowNodeInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFlowNodeInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryFlowNodeInstancesAlphaWithResponse(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error) {
	rsp, err := c.QueryFlowNodeInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFlowNodeInstancesAlphaResponse(rsp)
}

// QueryIncidentsWithBodyWithResponse request with arbitrary body returning *QueryIncidentsResponse
func (c *ClientWithResponses) QueryIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error) {
	rsp, err := c.QueryIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIncidentsResponse(rsp)
}

func (c *ClientWithResponses) QueryIncidentsWithResponse(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error) {
	rsp, err := c.QueryIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIncidentsResponse(rsp)
}

// GetIncidentByKeyWithResponse request returning *GetIncidentByKeyResponse
func (c *ClientWithResponses) GetIncidentByKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error) {
	rsp, err := c.GetIncidentByKey(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentByKeyResponse(rsp)
}

// ResolveIncidentWithResponse request returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncident(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ActivateJobsWithBodyWithResponse request with arbitrary body returning *ActivateJobsResponse
func (c *ClientWithResponses) ActivateJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error) {
	rsp, err := c.ActivateJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateJobsResponse(rsp)
}

func (c *ClientWithResponses) ActivateJobsWithResponse(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error) {
	rsp, err := c.ActivateJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateJobsResponse(rsp)
}

// UpdateAJobWithBodyWithResponse request with arbitrary body returning *UpdateAJobResponse
func (c *ClientWithResponses) UpdateAJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error) {
	rsp, err := c.UpdateAJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAJobResponse(rsp)
}

func (c *ClientWithResponses) UpdateAJobWithResponse(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error) {
	rsp, err := c.UpdateAJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAJobResponse(rsp)
}

// CompleteJobWithResponse request returning *CompleteJobResponse
func (c *ClientWithResponses) CompleteJobWithResponse(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error) {
	rsp, err := c.CompleteJob(ctx, jobKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobResponse(rsp)
}

// ReportErrorForJobWithBodyWithResponse request with arbitrary body returning *ReportErrorForJobResponse
func (c *ClientWithResponses) ReportErrorForJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error) {
	rsp, err := c.ReportErrorForJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportErrorForJobResponse(rsp)
}

func (c *ClientWithResponses) ReportErrorForJobWithResponse(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error) {
	rsp, err := c.ReportErrorForJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportErrorForJobResponse(rsp)
}

// FailJobWithBodyWithResponse request with arbitrary body returning *FailJobResponse
func (c *ClientWithResponses) FailJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailJobResponse, error) {
	rsp, err := c.FailJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailJobResponse(rsp)
}

func (c *ClientWithResponses) FailJobWithResponse(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*FailJobResponse, error) {
	rsp, err := c.FailJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailJobResponse(rsp)
}

// GetStatusOfCamundaLicenseWithResponse request returning *GetStatusOfCamundaLicenseResponse
func (c *ClientWithResponses) GetStatusOfCamundaLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusOfCamundaLicenseResponse, error) {
	rsp, err := c.GetStatusOfCamundaLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusOfCamundaLicenseResponse(rsp)
}

// CorrelateAMessageWithBodyWithResponse request with arbitrary body returning *CorrelateAMessageResponse
func (c *ClientWithResponses) CorrelateAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error) {
	rsp, err := c.CorrelateAMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrelateAMessageResponse(rsp)
}

func (c *ClientWithResponses) CorrelateAMessageWithResponse(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error) {
	rsp, err := c.CorrelateAMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrelateAMessageResponse(rsp)
}

// PublishAMessageWithBodyWithResponse request with arbitrary body returning *PublishAMessageResponse
func (c *ClientWithResponses) PublishAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error) {
	rsp, err := c.PublishAMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishAMessageResponse(rsp)
}

func (c *ClientWithResponses) PublishAMessageWithResponse(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error) {
	rsp, err := c.PublishAMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishAMessageResponse(rsp)
}

// CreateProcessInstanceWithBodyWithResponse request with arbitrary body returning *CreateProcessInstanceResponse
func (c *ClientWithResponses) CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

// QueryProcessInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryProcessInstancesAlphaResponse
func (c *ClientWithResponses) QueryProcessInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error) {
	rsp, err := c.QueryProcessInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProcessInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryProcessInstancesAlphaWithResponse(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error) {
	rsp, err := c.QueryProcessInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProcessInstancesAlphaResponse(rsp)
}

// CancelProcessInstanceWithBodyWithResponse request with arbitrary body returning *CancelProcessInstanceResponse
func (c *ClientWithResponses) CancelProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error) {
	rsp, err := c.CancelProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) CancelProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error) {
	rsp, err := c.CancelProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelProcessInstanceResponse(rsp)
}

// MigrateProcessInstanceWithBodyWithResponse request with arbitrary body returning *MigrateProcessInstanceResponse
func (c *ClientWithResponses) MigrateProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error) {
	rsp, err := c.MigrateProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) MigrateProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error) {
	rsp, err := c.MigrateProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateProcessInstanceResponse(rsp)
}

// ModifyProcessInstanceWithBodyWithResponse request with arbitrary body returning *ModifyProcessInstanceResponse
func (c *ClientWithResponses) ModifyProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error) {
	rsp, err := c.ModifyProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) ModifyProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error) {
	rsp, err := c.ModifyProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProcessInstanceResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// GetResourceContentWithResponse request returning *GetResourceContentResponse
func (c *ClientWithResponses) GetResourceContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceContentResponse, error) {
	rsp, err := c.GetResourceContent(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceContentResponse(rsp)
}

// DeleteResourceWithBodyWithResponse request with arbitrary body returning *DeleteResourceResponse
func (c *ClientWithResponses) DeleteResourceWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResourceWithBody(ctx, resourceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

func (c *ClientWithResponses) DeleteResourceWithResponse(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResource(ctx, resourceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

// BroadcastSignalWithBodyWithResponse request with arbitrary body returning *BroadcastSignalResponse
func (c *ClientWithResponses) BroadcastSignalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error) {
	rsp, err := c.BroadcastSignalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastSignalResponse(rsp)
}

func (c *ClientWithResponses) BroadcastSignalWithResponse(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error) {
	rsp, err := c.BroadcastSignal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastSignalResponse(rsp)
}

// GetClusterTopologyWithResponse request returning *GetClusterTopologyResponse
func (c *ClientWithResponses) GetClusterTopologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterTopologyResponse, error) {
	rsp, err := c.GetClusterTopology(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterTopologyResponse(rsp)
}

// QueryUserTasksAlphaWithBodyWithResponse request with arbitrary body returning *QueryUserTasksAlphaResponse
func (c *ClientWithResponses) QueryUserTasksAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error) {
	rsp, err := c.QueryUserTasksAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserTasksAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryUserTasksAlphaWithResponse(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error) {
	rsp, err := c.QueryUserTasksAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserTasksAlphaResponse(rsp)
}

// UpdateAUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateAUserTaskResponse
func (c *ClientWithResponses) UpdateAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error) {
	rsp, err := c.UpdateAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateAUserTaskWithResponse(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error) {
	rsp, err := c.UpdateAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAUserTaskResponse(rsp)
}

// UnassignAUserTaskWithResponse request returning *UnassignAUserTaskResponse
func (c *ClientWithResponses) UnassignAUserTaskWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*UnassignAUserTaskResponse, error) {
	rsp, err := c.UnassignAUserTask(ctx, userTaskKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnassignAUserTaskResponse(rsp)
}

// AssignAUserTaskWithBodyWithResponse request with arbitrary body returning *AssignAUserTaskResponse
func (c *ClientWithResponses) AssignAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error) {
	rsp, err := c.AssignAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AssignAUserTaskWithResponse(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error) {
	rsp, err := c.AssignAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignAUserTaskResponse(rsp)
}

// CompleteAUserTaskWithBodyWithResponse request with arbitrary body returning *CompleteAUserTaskResponse
func (c *ClientWithResponses) CompleteAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error) {
	rsp, err := c.CompleteAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) CompleteAUserTaskWithResponse(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error) {
	rsp, err := c.CompleteAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteAUserTaskResponse(rsp)
}

// QueryUsersAlphaWithBodyWithResponse request with arbitrary body returning *QueryUsersAlphaResponse
func (c *ClientWithResponses) QueryUsersAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error) {
	rsp, err := c.QueryUsersAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsersAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryUsersAlphaWithResponse(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error) {
	rsp, err := c.QueryUsersAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsersAlphaResponse(rsp)
}

// ParsePinInternalClockAlphaResponse parses an HTTP response from a PinInternalClockAlphaWithResponse call
func ParsePinInternalClockAlphaResponse(rsp *http.Response) (*PinInternalClockAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PinInternalClockAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetInternalClockAlphaResponse parses an HTTP response from a ResetInternalClockAlphaWithResponse call
func ParseResetInternalClockAlphaResponse(rsp *http.Response) (*ResetInternalClockAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetInternalClockAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEvaluateDecisionResponse parses an HTTP response from a EvaluateDecisionWithResponse call
func ParseEvaluateDecisionResponse(rsp *http.Response) (*EvaluateDecisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateDecisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionDefinitionsAlphaResponse parses an HTTP response from a QueryDecisionDefinitionsAlphaWithResponse call
func ParseQueryDecisionDefinitionsAlphaResponse(rsp *http.Response) (*QueryDecisionDefinitionsAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionDefinitionsAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDecisionDefinitionXmlAlphaResponse parses an HTTP response from a GetDecisionDefinitionXmlAlphaWithResponse call
func ParseGetDecisionDefinitionXmlAlphaResponse(rsp *http.Response) (*GetDecisionDefinitionXmlAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionDefinitionXmlAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionInstancesAlphaResponse parses an HTTP response from a QueryDecisionInstancesAlphaWithResponse call
func ParseQueryDecisionInstancesAlphaResponse(rsp *http.Response) (*QueryDecisionInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionRequirementsAlphaResponse parses an HTTP response from a QueryDecisionRequirementsAlphaWithResponse call
func ParseQueryDecisionRequirementsAlphaResponse(rsp *http.Response) (*QueryDecisionRequirementsAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionRequirementsAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeployResourcesResponse parses an HTTP response from a DeployResourcesWithResponse call
func ParseDeployResourcesResponse(rsp *http.Response) (*DeployResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeployResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDocumentLinkResponse parses an HTTP response from a CreateDocumentLinkWithResponse call
func ParseCreateDocumentLinkResponse(rsp *http.Response) (*CreateDocumentLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDocumentLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadDocumentResponse parses an HTTP response from a UploadDocumentWithResponse call
func ParseUploadDocumentResponse(rsp *http.Response) (*UploadDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadMultipleDocumentsResponse parses an HTTP response from a UploadMultipleDocumentsWithResponse call
func ParseUploadMultipleDocumentsResponse(rsp *http.Response) (*UploadMultipleDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadMultipleDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDocumentResponse parses an HTTP response from a DeleteDocumentWithResponse call
func ParseDeleteDocumentResponse(rsp *http.Response) (*DeleteDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDownloadDocumentResponse parses an HTTP response from a DownloadDocumentWithResponse call
func ParseDownloadDocumentResponse(rsp *http.Response) (*DownloadDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateElementInstanceVariablesResponse parses an HTTP response from a UpdateElementInstanceVariablesWithResponse call
func ParseUpdateElementInstanceVariablesResponse(rsp *http.Response) (*UpdateElementInstanceVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateElementInstanceVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryFlowNodeInstancesAlphaResponse parses an HTTP response from a QueryFlowNodeInstancesAlphaWithResponse call
func ParseQueryFlowNodeInstancesAlphaResponse(rsp *http.Response) (*QueryFlowNodeInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryFlowNodeInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryIncidentsResponse parses an HTTP response from a QueryIncidentsWithResponse call
func ParseQueryIncidentsResponse(rsp *http.Response) (*QueryIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentByKeyResponse parses an HTTP response from a GetIncidentByKeyWithResponse call
func ParseGetIncidentByKeyResponse(rsp *http.Response) (*GetIncidentByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseActivateJobsResponse parses an HTTP response from a ActivateJobsWithResponse call
func ParseActivateJobsResponse(rsp *http.Response) (*ActivateJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAJobResponse parses an HTTP response from a UpdateAJobWithResponse call
func ParseUpdateAJobResponse(rsp *http.Response) (*UpdateAJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCompleteJobResponse parses an HTTP response from a CompleteJobWithResponse call
func ParseCompleteJobResponse(rsp *http.Response) (*CompleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportErrorForJobResponse parses an HTTP response from a ReportErrorForJobWithResponse call
func ParseReportErrorForJobResponse(rsp *http.Response) (*ReportErrorForJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportErrorForJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFailJobResponse parses an HTTP response from a FailJobWithResponse call
func ParseFailJobResponse(rsp *http.Response) (*FailJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FailJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusOfCamundaLicenseResponse parses an HTTP response from a GetStatusOfCamundaLicenseWithResponse call
func ParseGetStatusOfCamundaLicenseResponse(rsp *http.Response) (*GetStatusOfCamundaLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusOfCamundaLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCorrelateAMessageResponse parses an HTTP response from a CorrelateAMessageWithResponse call
func ParseCorrelateAMessageResponse(rsp *http.Response) (*CorrelateAMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrelateAMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishAMessageResponse parses an HTTP response from a PublishAMessageWithResponse call
func ParsePublishAMessageResponse(rsp *http.Response) (*PublishAMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishAMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateProcessInstanceResponse parses an HTTP response from a CreateProcessInstanceWithResponse call
func ParseCreateProcessInstanceResponse(rsp *http.Response) (*CreateProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryProcessInstancesAlphaResponse parses an HTTP response from a QueryProcessInstancesAlphaWithResponse call
func ParseQueryProcessInstancesAlphaResponse(rsp *http.Response) (*QueryProcessInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryProcessInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelProcessInstanceResponse parses an HTTP response from a CancelProcessInstanceWithResponse call
func ParseCancelProcessInstanceResponse(rsp *http.Response) (*CancelProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Rfc7807Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Rfc7807Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Rfc7807Problem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseMigrateProcessInstanceResponse parses an HTTP response from a MigrateProcessInstanceWithResponse call
func ParseMigrateProcessInstanceResponse(rsp *http.Response) (*MigrateProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrateProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseModifyProcessInstanceResponse parses an HTTP response from a ModifyProcessInstanceWithResponse call
func ParseModifyProcessInstanceResponse(rsp *http.Response) (*ModifyProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceContentResponse parses an HTTP response from a GetResourceContentWithResponse call
func ParseGetResourceContentResponse(rsp *http.Response) (*GetResourceContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteResourceResponse parses an HTTP response from a DeleteResourceWithResponse call
func ParseDeleteResourceResponse(rsp *http.Response) (*DeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBroadcastSignalResponse parses an HTTP response from a BroadcastSignalWithResponse call
func ParseBroadcastSignalResponse(rsp *http.Response) (*BroadcastSignalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastSignalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusterTopologyResponse parses an HTTP response from a GetClusterTopologyWithResponse call
func ParseGetClusterTopologyResponse(rsp *http.Response) (*GetClusterTopologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterTopologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Topology
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUserTasksAlphaResponse parses an HTTP response from a QueryUserTasksAlphaWithResponse call
func ParseQueryUserTasksAlphaResponse(rsp *http.Response) (*QueryUserTasksAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUserTasksAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAUserTaskResponse parses an HTTP response from a UpdateAUserTaskWithResponse call
func ParseUpdateAUserTaskResponse(rsp *http.Response) (*UpdateAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnassignAUserTaskResponse parses an HTTP response from a UnassignAUserTaskWithResponse call
func ParseUnassignAUserTaskResponse(rsp *http.Response) (*UnassignAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnassignAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAssignAUserTaskResponse parses an HTTP response from a AssignAUserTaskWithResponse call
func ParseAssignAUserTaskResponse(rsp *http.Response) (*AssignAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCompleteAUserTaskResponse parses an HTTP response from a CompleteAUserTaskWithResponse call
func ParseCompleteAUserTaskResponse(rsp *http.Response) (*CompleteAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryUsersAlphaResponse parses an HTTP response from a QueryUsersAlphaWithResponse call
func ParseQueryUsersAlphaResponse(rsp *http.Response) (*QueryUsersAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUsersAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"O6q5O2bTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
