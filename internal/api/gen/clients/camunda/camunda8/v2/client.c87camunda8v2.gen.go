// Package c87camunda8v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package c87camunda8v2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// PinInternalClockAlphaJSONBody defines parameters for PinInternalClockAlpha.
type PinInternalClockAlphaJSONBody struct {
	Timestamp *float32 `json:"timestamp,omitempty"`
}

// EvaluateDecisionJSONBody defines parameters for EvaluateDecision.
type EvaluateDecisionJSONBody struct {
	DecisionDefinitionKey *float32                `json:"decisionDefinitionKey,omitempty"`
	TenantId              *string                 `json:"tenantId,omitempty"`
	Variables             *map[string]interface{} `json:"variables,omitempty"`
}

// QueryDecisionDefinitionsAlphaJSONBody defines parameters for QueryDecisionDefinitionsAlpha.
type QueryDecisionDefinitionsAlphaJSONBody struct {
	Filter *struct {
		DecisionKey               *float32 `json:"decisionKey,omitempty"`
		DecisionRequirementsKey   *float32 `json:"decisionRequirementsKey,omitempty"`
		DmnDecisionId             *string  `json:"dmnDecisionId,omitempty"`
		DmnDecisionName           *string  `json:"dmnDecisionName,omitempty"`
		DmnDecisionRequirementsId *string  `json:"dmnDecisionRequirementsId,omitempty"`
		TenantId                  *string  `json:"tenantId,omitempty"`
		Version                   *float32 `json:"version,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryDecisionInstancesAlphaJSONBody defines parameters for QueryDecisionInstancesAlpha.
type QueryDecisionInstancesAlphaJSONBody struct {
	Filter *struct {
		DecisionDefinitionId      *string  `json:"decisionDefinitionId,omitempty"`
		DecisionDefinitionKey     *float32 `json:"decisionDefinitionKey,omitempty"`
		DecisionDefinitionName    *string  `json:"decisionDefinitionName,omitempty"`
		DecisionDefinitionVersion *float32 `json:"decisionDefinitionVersion,omitempty"`
		EvaluationFailure         *string  `json:"evaluationFailure,omitempty"`
		Key                       *float32 `json:"key,omitempty"`
		ProcessDefinitionKey      *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey        *float32 `json:"processInstanceKey,omitempty"`
		TenantId                  *string  `json:"tenantId,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryDecisionRequirementsAlphaJSONBody defines parameters for QueryDecisionRequirementsAlpha.
type QueryDecisionRequirementsAlphaJSONBody struct {
	Filter *struct {
		DecisionRequirementsKey     *float32 `json:"decisionRequirementsKey,omitempty"`
		DmnDecisionRequirementsId   *string  `json:"dmnDecisionRequirementsId,omitempty"`
		DmnDecisionRequirementsName *string  `json:"dmnDecisionRequirementsName,omitempty"`
		TenantId                    *string  `json:"tenantId,omitempty"`
		Version                     *float32 `json:"version,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// CreateDocumentLinkJSONBody defines parameters for CreateDocumentLink.
type CreateDocumentLinkJSONBody struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// UpdateElementInstanceVariablesJSONBody defines parameters for UpdateElementInstanceVariables.
type UpdateElementInstanceVariablesJSONBody struct {
	Local              *bool                   `json:"local,omitempty"`
	OperationReference *float32                `json:"operationReference,omitempty"`
	Variables          *map[string]interface{} `json:"variables,omitempty"`
}

// QueryFlowNodeInstancesAlphaJSONBody defines parameters for QueryFlowNodeInstancesAlpha.
type QueryFlowNodeInstancesAlphaJSONBody struct {
	Filter *struct {
		FlowNodeId           *string  `json:"flowNodeId,omitempty"`
		FlowNodeInstanceKey  *float32 `json:"flowNodeInstanceKey,omitempty"`
		FlowNodeName         *string  `json:"flowNodeName,omitempty"`
		Incident             *bool    `json:"incident,omitempty"`
		IncidentKey          *float32 `json:"incidentKey,omitempty"`
		ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey   *float32 `json:"processInstanceKey,omitempty"`
		State                *string  `json:"state,omitempty"`
		TenantId             *string  `json:"tenantId,omitempty"`
		TreePath             *string  `json:"treePath,omitempty"`
		Type                 *string  `json:"type,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryIncidentsJSONBody defines parameters for QueryIncidents.
type QueryIncidentsJSONBody struct {
	Filter *struct {
		FlowNodeId           *string  `json:"flowNodeId,omitempty"`
		FlowNodeInstanceId   *string  `json:"flowNodeInstanceId,omitempty"`
		HasActiveOperation   *bool    `json:"hasActiveOperation,omitempty"`
		JobKey               *float32 `json:"jobKey,omitempty"`
		Key                  *float32 `json:"key,omitempty"`
		Message              *string  `json:"message,omitempty"`
		ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey   *float32 `json:"processInstanceKey,omitempty"`
		State                *string  `json:"state,omitempty"`
		TenantId             *string  `json:"tenantId,omitempty"`
		Type                 *string  `json:"type,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// ActivateJobsJSONBody defines parameters for ActivateJobs.
type ActivateJobsJSONBody struct {
	FetchVariable     *[]string `json:"fetchVariable,omitempty"`
	MaxJobsToActivate *float32  `json:"maxJobsToActivate,omitempty"`
	RequestTimeout    *float32  `json:"requestTimeout,omitempty"`
	TenantIds         *[]string `json:"tenantIds,omitempty"`
	Timeout           *float32  `json:"timeout,omitempty"`
	Type              *string   `json:"type,omitempty"`
	Worker            *string   `json:"worker,omitempty"`
}

// UpdateAJobJSONBody defines parameters for UpdateAJob.
type UpdateAJobJSONBody struct {
	Changeset *struct {
		Retries *float32 `json:"retries,omitempty"`
		Timeout *float32 `json:"timeout,omitempty"`
	} `json:"changeset,omitempty"`
}

// ReportErrorForJobJSONBody defines parameters for ReportErrorForJob.
type ReportErrorForJobJSONBody struct {
	ErrorCode *string `json:"errorCode,omitempty"`
}

// FailJobJSONBody defines parameters for FailJob.
type FailJobJSONBody struct {
	Retries      *float32 `json:"retries,omitempty"`
	RetryBackOff *float32 `json:"retryBackOff,omitempty"`
}

// CorrelateAMessageJSONBody defines parameters for CorrelateAMessage.
type CorrelateAMessageJSONBody struct {
	CorrelationKey *string                 `json:"correlationKey,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	TenantId       *string                 `json:"tenantId,omitempty"`
	Variables      *map[string]interface{} `json:"variables,omitempty"`
}

// PublishAMessageJSONBody defines parameters for PublishAMessage.
type PublishAMessageJSONBody struct {
	CorrelationKey *string                 `json:"correlationKey,omitempty"`
	MessageId      *string                 `json:"messageId,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	TenantId       *string                 `json:"tenantId,omitempty"`
	TimeToLive     *float32                `json:"timeToLive,omitempty"`
	Variables      *map[string]interface{} `json:"variables,omitempty"`
}

// CreateProcessInstanceJSONBody defines parameters for CreateProcessInstance.
type CreateProcessInstanceJSONBody struct {
	AwaitCompletion      *bool    `json:"awaitCompletion,omitempty"`
	BpmnProcessId        *string  `json:"bpmnProcessId,omitempty"`
	OperationReference   *float32 `json:"operationReference,omitempty"`
	ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
	RequestTimeout       *float32 `json:"requestTimeout,omitempty"`
	StartInstructions    *[]struct {
		ElementId *string `json:"elementId,omitempty"`
	} `json:"startInstructions,omitempty"`
	TenantId  *string                 `json:"tenantId,omitempty"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
	Version   *float32                `json:"version,omitempty"`
}

// QueryProcessInstancesAlphaJSONBody defines parameters for QueryProcessInstancesAlpha.
type QueryProcessInstancesAlphaJSONBody struct {
	Filter *struct {
		Key       *[]float32 `json:"key,omitempty"`
		Variables *[]struct {
			Eq   *map[string]interface{} `json:"eq,omitempty"`
			Gt   *map[string]interface{} `json:"gt,omitempty"`
			Gte  *map[string]interface{} `json:"gte,omitempty"`
			Lt   *map[string]interface{} `json:"lt,omitempty"`
			Lte  *map[string]interface{} `json:"lte,omitempty"`
			Name *string                 `json:"name,omitempty"`
		} `json:"variables,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// CancelProcessInstanceJSONBody defines parameters for CancelProcessInstance.
type CancelProcessInstanceJSONBody struct {
	OperationReference *float32 `json:"operationReference,omitempty"`
}

// MigrateProcessInstanceJSONBody defines parameters for MigrateProcessInstance.
type MigrateProcessInstanceJSONBody struct {
	MappingInstructions *[]struct {
		SourceElementId *string `json:"sourceElementId,omitempty"`
		TargetElementId *string `json:"targetElementId,omitempty"`
	} `json:"mappingInstructions,omitempty"`
	OperationReference         *float32 `json:"operationReference,omitempty"`
	TargetProcessDefinitionKey *float32 `json:"targetProcessDefinitionKey,omitempty"`
}

// ModifyProcessInstanceJSONBody defines parameters for ModifyProcessInstance.
type ModifyProcessInstanceJSONBody struct {
	ActivateInstructions *[]struct {
		AncestorElementInstanceKey *float32 `json:"ancestorElementInstanceKey,omitempty"`
		ElementId                  *string  `json:"elementId,omitempty"`
		VariableInstructions       *[]struct {
			ScopeId   *string                 `json:"scopeId,omitempty"`
			Variables *map[string]interface{} `json:"variables,omitempty"`
		} `json:"variableInstructions,omitempty"`
	} `json:"activateInstructions,omitempty"`
	OperationReference    *float32 `json:"operationReference,omitempty"`
	TerminateInstructions *[]struct {
		ElementInstanceKey *float32 `json:"elementInstanceKey,omitempty"`
	} `json:"terminateInstructions,omitempty"`
}

// DeleteResourceJSONBody defines parameters for DeleteResource.
type DeleteResourceJSONBody struct {
	OperationReference *float32 `json:"operationReference,omitempty"`
}

// BroadcastSignalJSONBody defines parameters for BroadcastSignal.
type BroadcastSignalJSONBody struct {
	SignalName *string                 `json:"signalName,omitempty"`
	TenantId   *string                 `json:"tenantId,omitempty"`
	Variables  *map[string]interface{} `json:"variables,omitempty"`
}

// QueryUserTasksAlphaJSONBody defines parameters for QueryUserTasksAlpha.
type QueryUserTasksAlphaJSONBody interface{}

// UpdateAUserTaskJSONBody defines parameters for UpdateAUserTask.
type UpdateAUserTaskJSONBody struct {
	Action    *string `json:"action,omitempty"`
	Changeset *struct {
		CandidateGroups *[]string `json:"candidateGroups,omitempty"`
		CandidateUsers  *[]string `json:"candidateUsers,omitempty"`
		DueDate         *string   `json:"dueDate,omitempty"`
		FollowUpDate    *string   `json:"followUpDate,omitempty"`
	} `json:"changeset,omitempty"`
}

// AssignAUserTaskJSONBody defines parameters for AssignAUserTask.
type AssignAUserTaskJSONBody struct {
	Action        *string `json:"action,omitempty"`
	AllowOverride *bool   `json:"allowOverride,omitempty"`
	Assignee      *string `json:"assignee,omitempty"`
}

// CompleteAUserTaskJSONBody defines parameters for CompleteAUserTask.
type CompleteAUserTaskJSONBody struct {
	Action    *string                 `json:"action,omitempty"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// QueryUsersAlphaJSONBody defines parameters for QueryUsersAlpha.
type QueryUsersAlphaJSONBody struct {
	Filter *struct {
		Email    *string `json:"email,omitempty"`
		Name     *string `json:"name,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// PinInternalClockAlphaJSONRequestBody defines body for PinInternalClockAlpha for application/json ContentType.
type PinInternalClockAlphaJSONRequestBody PinInternalClockAlphaJSONBody

// EvaluateDecisionJSONRequestBody defines body for EvaluateDecision for application/json ContentType.
type EvaluateDecisionJSONRequestBody EvaluateDecisionJSONBody

// QueryDecisionDefinitionsAlphaJSONRequestBody defines body for QueryDecisionDefinitionsAlpha for application/json ContentType.
type QueryDecisionDefinitionsAlphaJSONRequestBody QueryDecisionDefinitionsAlphaJSONBody

// QueryDecisionInstancesAlphaJSONRequestBody defines body for QueryDecisionInstancesAlpha for application/json ContentType.
type QueryDecisionInstancesAlphaJSONRequestBody QueryDecisionInstancesAlphaJSONBody

// QueryDecisionRequirementsAlphaJSONRequestBody defines body for QueryDecisionRequirementsAlpha for application/json ContentType.
type QueryDecisionRequirementsAlphaJSONRequestBody QueryDecisionRequirementsAlphaJSONBody

// CreateDocumentLinkJSONRequestBody defines body for CreateDocumentLink for application/json ContentType.
type CreateDocumentLinkJSONRequestBody CreateDocumentLinkJSONBody

// UpdateElementInstanceVariablesJSONRequestBody defines body for UpdateElementInstanceVariables for application/json ContentType.
type UpdateElementInstanceVariablesJSONRequestBody UpdateElementInstanceVariablesJSONBody

// QueryFlowNodeInstancesAlphaJSONRequestBody defines body for QueryFlowNodeInstancesAlpha for application/json ContentType.
type QueryFlowNodeInstancesAlphaJSONRequestBody QueryFlowNodeInstancesAlphaJSONBody

// QueryIncidentsJSONRequestBody defines body for QueryIncidents for application/json ContentType.
type QueryIncidentsJSONRequestBody QueryIncidentsJSONBody

// ActivateJobsJSONRequestBody defines body for ActivateJobs for application/json ContentType.
type ActivateJobsJSONRequestBody ActivateJobsJSONBody

// UpdateAJobJSONRequestBody defines body for UpdateAJob for application/json ContentType.
type UpdateAJobJSONRequestBody UpdateAJobJSONBody

// ReportErrorForJobJSONRequestBody defines body for ReportErrorForJob for application/json ContentType.
type ReportErrorForJobJSONRequestBody ReportErrorForJobJSONBody

// FailJobJSONRequestBody defines body for FailJob for application/json ContentType.
type FailJobJSONRequestBody FailJobJSONBody

// CorrelateAMessageJSONRequestBody defines body for CorrelateAMessage for application/json ContentType.
type CorrelateAMessageJSONRequestBody CorrelateAMessageJSONBody

// PublishAMessageJSONRequestBody defines body for PublishAMessage for application/json ContentType.
type PublishAMessageJSONRequestBody PublishAMessageJSONBody

// CreateProcessInstanceJSONRequestBody defines body for CreateProcessInstance for application/json ContentType.
type CreateProcessInstanceJSONRequestBody CreateProcessInstanceJSONBody

// QueryProcessInstancesAlphaJSONRequestBody defines body for QueryProcessInstancesAlpha for application/json ContentType.
type QueryProcessInstancesAlphaJSONRequestBody QueryProcessInstancesAlphaJSONBody

// CancelProcessInstanceJSONRequestBody defines body for CancelProcessInstance for application/json ContentType.
type CancelProcessInstanceJSONRequestBody CancelProcessInstanceJSONBody

// MigrateProcessInstanceJSONRequestBody defines body for MigrateProcessInstance for application/json ContentType.
type MigrateProcessInstanceJSONRequestBody MigrateProcessInstanceJSONBody

// ModifyProcessInstanceJSONRequestBody defines body for ModifyProcessInstance for application/json ContentType.
type ModifyProcessInstanceJSONRequestBody ModifyProcessInstanceJSONBody

// DeleteResourceJSONRequestBody defines body for DeleteResource for application/json ContentType.
type DeleteResourceJSONRequestBody DeleteResourceJSONBody

// BroadcastSignalJSONRequestBody defines body for BroadcastSignal for application/json ContentType.
type BroadcastSignalJSONRequestBody BroadcastSignalJSONBody

// QueryUserTasksAlphaJSONRequestBody defines body for QueryUserTasksAlpha for application/json ContentType.
type QueryUserTasksAlphaJSONRequestBody QueryUserTasksAlphaJSONBody

// UpdateAUserTaskJSONRequestBody defines body for UpdateAUserTask for application/json ContentType.
type UpdateAUserTaskJSONRequestBody UpdateAUserTaskJSONBody

// AssignAUserTaskJSONRequestBody defines body for AssignAUserTask for application/json ContentType.
type AssignAUserTaskJSONRequestBody AssignAUserTaskJSONBody

// CompleteAUserTaskJSONRequestBody defines body for CompleteAUserTask for application/json ContentType.
type CompleteAUserTaskJSONRequestBody CompleteAUserTaskJSONBody

// QueryUsersAlphaJSONRequestBody defines body for QueryUsersAlpha for application/json ContentType.
type QueryUsersAlphaJSONRequestBody QueryUsersAlphaJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PinInternalClockAlphaWithBody request with any body
	PinInternalClockAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PinInternalClockAlpha(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetInternalClockAlpha request
	ResetInternalClockAlpha(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateDecisionWithBody request with any body
	EvaluateDecisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluateDecision(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionDefinitionsAlphaWithBody request with any body
	QueryDecisionDefinitionsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionDefinitionsAlpha(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionDefinitionXmlAlpha request
	GetDecisionDefinitionXmlAlpha(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionInstancesAlphaWithBody request with any body
	QueryDecisionInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionInstancesAlpha(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionRequirementsAlphaWithBody request with any body
	QueryDecisionRequirementsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionRequirementsAlpha(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeployResources request
	DeployResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDocumentLinkWithBody request with any body
	CreateDocumentLinkWithBody(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDocumentLink(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadDocument request
	UploadDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadMultipleDocuments request
	UploadMultipleDocuments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDocument request
	DeleteDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadDocument request
	DownloadDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateElementInstanceVariablesWithBody request with any body
	UpdateElementInstanceVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateElementInstanceVariables(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryFlowNodeInstancesAlphaWithBody request with any body
	QueryFlowNodeInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryFlowNodeInstancesAlpha(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryIncidentsWithBody request with any body
	QueryIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryIncidents(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentByKey request
	GetIncidentByKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request
	ResolveIncident(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateJobsWithBody request with any body
	ActivateJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActivateJobs(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAJobWithBody request with any body
	UpdateAJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAJob(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteJob request
	CompleteJob(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportErrorForJobWithBody request with any body
	ReportErrorForJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportErrorForJob(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FailJobWithBody request with any body
	FailJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FailJob(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusOfCamundaLicense request
	GetStatusOfCamundaLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrelateAMessageWithBody request with any body
	CorrelateAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrelateAMessage(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishAMessageWithBody request with any body
	PublishAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishAMessage(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProcessInstanceWithBody request with any body
	CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryProcessInstancesAlphaWithBody request with any body
	QueryProcessInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryProcessInstancesAlpha(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelProcessInstanceWithBody request with any body
	CancelProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelProcessInstance(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrateProcessInstanceWithBody request with any body
	MigrateProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MigrateProcessInstance(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyProcessInstanceWithBody request with any body
	ModifyProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyProcessInstance(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceContent request
	GetResourceContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceWithBody request with any body
	DeleteResourceWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteResource(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BroadcastSignalWithBody request with any body
	BroadcastSignalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BroadcastSignal(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterTypology request
	GetClusterTypology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUserTasksAlphaWithBody request with any body
	QueryUserTasksAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUserTasksAlpha(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAUserTaskWithBody request with any body
	UpdateAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAUserTask(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnassignAUserTask request
	UnassignAUserTask(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignAUserTaskWithBody request with any body
	AssignAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignAUserTask(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteAUserTaskWithBody request with any body
	CompleteAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteAUserTask(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUsersAlphaWithBody request with any body
	QueryUsersAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUsersAlpha(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PinInternalClockAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinInternalClockAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinInternalClockAlpha(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinInternalClockAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetInternalClockAlpha(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetInternalClockAlphaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateDecisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateDecisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateDecision(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateDecisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionDefinitionsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionDefinitionsAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionDefinitionsAlpha(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionDefinitionsAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionDefinitionXmlAlpha(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionDefinitionXmlAlphaRequest(c.Server, decisionKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionInstancesAlpha(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionRequirementsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionRequirementsAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionRequirementsAlpha(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionRequirementsAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLinkWithBody(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequestWithBody(c.Server, documentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLink(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequest(c.Server, documentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadDocumentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadMultipleDocuments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadMultipleDocumentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDocumentRequest(c.Server, documentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadDocumentRequest(c.Server, documentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElementInstanceVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElementInstanceVariablesRequestWithBody(c.Server, elementInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElementInstanceVariables(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElementInstanceVariablesRequest(c.Server, elementInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFlowNodeInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFlowNodeInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFlowNodeInstancesAlpha(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFlowNodeInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIncidents(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentByKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentByKeyRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncident(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateJobs(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAJob(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJob(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobRequest(c.Server, jobKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportErrorForJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportErrorForJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportErrorForJob(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportErrorForJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailJob(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusOfCamundaLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusOfCamundaLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrelateAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrelateAMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrelateAMessage(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrelateAMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishAMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishAMessage(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishAMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProcessInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProcessInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProcessInstancesAlpha(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProcessInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelProcessInstance(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateProcessInstance(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProcessInstance(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceContentRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequestWithBody(c.Server, resourceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResource(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequest(c.Server, resourceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastSignalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastSignalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastSignal(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastSignalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterTypology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterTypologyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserTasksAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserTasksAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserTasksAlpha(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserTasksAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAUserTask(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnassignAUserTask(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnassignAUserTaskRequest(c.Server, userTaskKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignAUserTask(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteAUserTask(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsersAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsersAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsersAlpha(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsersAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPinInternalClockAlphaRequest calls the generic PinInternalClockAlpha builder with application/json body
func NewPinInternalClockAlphaRequest(server string, body PinInternalClockAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPinInternalClockAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewPinInternalClockAlphaRequestWithBody generates requests for PinInternalClockAlpha with any type of body
func NewPinInternalClockAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetInternalClockAlphaRequest generates requests for ResetInternalClockAlpha
func NewResetInternalClockAlphaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateDecisionRequest calls the generic EvaluateDecision builder with application/json body
func NewEvaluateDecisionRequest(server string, body EvaluateDecisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluateDecisionRequestWithBody(server, "application/json", bodyReader)
}

// NewEvaluateDecisionRequestWithBody generates requests for EvaluateDecision with any type of body
func NewEvaluateDecisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/evaluation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryDecisionDefinitionsAlphaRequest calls the generic QueryDecisionDefinitionsAlpha builder with application/json body
func NewQueryDecisionDefinitionsAlphaRequest(server string, body QueryDecisionDefinitionsAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionDefinitionsAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionDefinitionsAlphaRequestWithBody generates requests for QueryDecisionDefinitionsAlpha with any type of body
func NewQueryDecisionDefinitionsAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecisionDefinitionXmlAlphaRequest generates requests for GetDecisionDefinitionXmlAlpha
func NewGetDecisionDefinitionXmlAlphaRequest(server string, decisionKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "decisionKey", runtime.ParamLocationPath, decisionKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/%s/xml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryDecisionInstancesAlphaRequest calls the generic QueryDecisionInstancesAlpha builder with application/json body
func NewQueryDecisionInstancesAlphaRequest(server string, body QueryDecisionInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionInstancesAlphaRequestWithBody generates requests for QueryDecisionInstancesAlpha with any type of body
func NewQueryDecisionInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryDecisionRequirementsAlphaRequest calls the generic QueryDecisionRequirementsAlpha builder with application/json body
func NewQueryDecisionRequirementsAlphaRequest(server string, body QueryDecisionRequirementsAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionRequirementsAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionRequirementsAlphaRequestWithBody generates requests for QueryDecisionRequirementsAlpha with any type of body
func NewQueryDecisionRequirementsAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-requirements/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeployResourcesRequest generates requests for DeployResources
func NewDeployResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDocumentLinkRequest calls the generic CreateDocumentLink builder with application/json body
func NewCreateDocumentLinkRequest(server string, documentId string, body CreateDocumentLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDocumentLinkRequestWithBody(server, documentId, "application/json", bodyReader)
}

// NewCreateDocumentLinkRequestWithBody generates requests for CreateDocumentLink with any type of body
func NewCreateDocumentLinkRequestWithBody(server string, documentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/document/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadDocumentRequest generates requests for UploadDocument
func NewUploadDocumentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadMultipleDocumentsRequest generates requests for UploadMultipleDocuments
func NewUploadMultipleDocumentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDocumentRequest generates requests for DeleteDocument
func NewDeleteDocumentRequest(server string, documentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadDocumentRequest generates requests for DownloadDocument
func NewDownloadDocumentRequest(server string, documentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateElementInstanceVariablesRequest calls the generic UpdateElementInstanceVariables builder with application/json body
func NewUpdateElementInstanceVariablesRequest(server string, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateElementInstanceVariablesRequestWithBody(server, elementInstanceKey, "application/json", bodyReader)
}

// NewUpdateElementInstanceVariablesRequestWithBody generates requests for UpdateElementInstanceVariables with any type of body
func NewUpdateElementInstanceVariablesRequestWithBody(server string, elementInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elementInstanceKey", runtime.ParamLocationPath, elementInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/element-instances/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryFlowNodeInstancesAlphaRequest calls the generic QueryFlowNodeInstancesAlpha builder with application/json body
func NewQueryFlowNodeInstancesAlphaRequest(server string, body QueryFlowNodeInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryFlowNodeInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryFlowNodeInstancesAlphaRequestWithBody generates requests for QueryFlowNodeInstancesAlpha with any type of body
func NewQueryFlowNodeInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flownode-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryIncidentsRequest calls the generic QueryIncidents builder with application/json body
func NewQueryIncidentsRequest(server string, body QueryIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryIncidentsRequestWithBody generates requests for QueryIncidents with any type of body
func NewQueryIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentByKeyRequest generates requests for GetIncidentByKey
func NewGetIncidentByKeyRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResolveIncidentRequest generates requests for ResolveIncident
func NewResolveIncidentRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s/resolution", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActivateJobsRequest calls the generic ActivateJobs builder with application/json body
func NewActivateJobsRequest(server string, body ActivateJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewActivateJobsRequestWithBody generates requests for ActivateJobs with any type of body
func NewActivateJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/activation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAJobRequest calls the generic UpdateAJob builder with application/json body
func NewUpdateAJobRequest(server string, jobKey string, body UpdateAJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewUpdateAJobRequestWithBody generates requests for UpdateAJob with any type of body
func NewUpdateAJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteJobRequest generates requests for CompleteJob
func NewCompleteJobRequest(server string, jobKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportErrorForJobRequest calls the generic ReportErrorForJob builder with application/json body
func NewReportErrorForJobRequest(server string, jobKey string, body ReportErrorForJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportErrorForJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewReportErrorForJobRequestWithBody generates requests for ReportErrorForJob with any type of body
func NewReportErrorForJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/error", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFailJobRequest calls the generic FailJob builder with application/json body
func NewFailJobRequest(server string, jobKey string, body FailJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFailJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewFailJobRequestWithBody generates requests for FailJob with any type of body
func NewFailJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/failure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusOfCamundaLicenseRequest generates requests for GetStatusOfCamundaLicense
func NewGetStatusOfCamundaLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCorrelateAMessageRequest calls the generic CorrelateAMessage builder with application/json body
func NewCorrelateAMessageRequest(server string, body CorrelateAMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCorrelateAMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewCorrelateAMessageRequestWithBody generates requests for CorrelateAMessage with any type of body
func NewCorrelateAMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/correlation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishAMessageRequest calls the generic PublishAMessage builder with application/json body
func NewPublishAMessageRequest(server string, body PublishAMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishAMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPublishAMessageRequestWithBody generates requests for PublishAMessage with any type of body
func NewPublishAMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/publication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateProcessInstanceRequest calls the generic CreateProcessInstance builder with application/json body
func NewCreateProcessInstanceRequest(server string, body CreateProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProcessInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProcessInstanceRequestWithBody generates requests for CreateProcessInstance with any type of body
func NewCreateProcessInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryProcessInstancesAlphaRequest calls the generic QueryProcessInstancesAlpha builder with application/json body
func NewQueryProcessInstancesAlphaRequest(server string, body QueryProcessInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryProcessInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryProcessInstancesAlphaRequestWithBody generates requests for QueryProcessInstancesAlpha with any type of body
func NewQueryProcessInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelProcessInstanceRequest calls the generic CancelProcessInstance builder with application/json body
func NewCancelProcessInstanceRequest(server string, processInstanceKey string, body CancelProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewCancelProcessInstanceRequestWithBody generates requests for CancelProcessInstance with any type of body
func NewCancelProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/cancellation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigrateProcessInstanceRequest calls the generic MigrateProcessInstance builder with application/json body
func NewMigrateProcessInstanceRequest(server string, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMigrateProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewMigrateProcessInstanceRequestWithBody generates requests for MigrateProcessInstance with any type of body
func NewMigrateProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/migration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyProcessInstanceRequest calls the generic ModifyProcessInstance builder with application/json body
func NewModifyProcessInstanceRequest(server string, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewModifyProcessInstanceRequestWithBody generates requests for ModifyProcessInstance with any type of body
func NewModifyProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/modification", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceContentRequest generates requests for GetResourceContent
func NewGetResourceContentRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteResourceRequest calls the generic DeleteResource builder with application/json body
func NewDeleteResourceRequest(server string, resourceKey string, body DeleteResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteResourceRequestWithBody(server, resourceKey, "application/json", bodyReader)
}

// NewDeleteResourceRequestWithBody generates requests for DeleteResource with any type of body
func NewDeleteResourceRequestWithBody(server string, resourceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/deletion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastSignalRequest calls the generic BroadcastSignal builder with application/json body
func NewBroadcastSignalRequest(server string, body BroadcastSignalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBroadcastSignalRequestWithBody(server, "application/json", bodyReader)
}

// NewBroadcastSignalRequestWithBody generates requests for BroadcastSignal with any type of body
func NewBroadcastSignalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signals/broadcast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterTypologyRequest generates requests for GetClusterTypology
func NewGetClusterTypologyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryUserTasksAlphaRequest calls the generic QueryUserTasksAlpha builder with application/json body
func NewQueryUserTasksAlphaRequest(server string, body QueryUserTasksAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUserTasksAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryUserTasksAlphaRequestWithBody generates requests for QueryUserTasksAlpha with any type of body
func NewQueryUserTasksAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAUserTaskRequest calls the generic UpdateAUserTask builder with application/json body
func NewUpdateAUserTaskRequest(server string, userTaskKey string, body UpdateAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewUpdateAUserTaskRequestWithBody generates requests for UpdateAUserTask with any type of body
func NewUpdateAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnassignAUserTaskRequest generates requests for UnassignAUserTask
func NewUnassignAUserTaskRequest(server string, userTaskKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignee", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignAUserTaskRequest calls the generic AssignAUserTask builder with application/json body
func NewAssignAUserTaskRequest(server string, userTaskKey string, body AssignAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewAssignAUserTaskRequestWithBody generates requests for AssignAUserTask with any type of body
func NewAssignAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteAUserTaskRequest calls the generic CompleteAUserTask builder with application/json body
func NewCompleteAUserTaskRequest(server string, userTaskKey string, body CompleteAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewCompleteAUserTaskRequestWithBody generates requests for CompleteAUserTask with any type of body
func NewCompleteAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUsersAlphaRequest calls the generic QueryUsersAlpha builder with application/json body
func NewQueryUsersAlphaRequest(server string, body QueryUsersAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUsersAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryUsersAlphaRequestWithBody generates requests for QueryUsersAlpha with any type of body
func NewQueryUsersAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PinInternalClockAlphaWithBodyWithResponse request with any body
	PinInternalClockAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error)

	PinInternalClockAlphaWithResponse(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error)

	// ResetInternalClockAlphaWithResponse request
	ResetInternalClockAlphaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetInternalClockAlphaResponse, error)

	// EvaluateDecisionWithBodyWithResponse request with any body
	EvaluateDecisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error)

	EvaluateDecisionWithResponse(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error)

	// QueryDecisionDefinitionsAlphaWithBodyWithResponse request with any body
	QueryDecisionDefinitionsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error)

	QueryDecisionDefinitionsAlphaWithResponse(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error)

	// GetDecisionDefinitionXmlAlphaWithResponse request
	GetDecisionDefinitionXmlAlphaWithResponse(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionXmlAlphaResponse, error)

	// QueryDecisionInstancesAlphaWithBodyWithResponse request with any body
	QueryDecisionInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error)

	QueryDecisionInstancesAlphaWithResponse(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error)

	// QueryDecisionRequirementsAlphaWithBodyWithResponse request with any body
	QueryDecisionRequirementsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error)

	QueryDecisionRequirementsAlphaWithResponse(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error)

	// DeployResourcesWithResponse request
	DeployResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeployResourcesResponse, error)

	// CreateDocumentLinkWithBodyWithResponse request with any body
	CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	CreateDocumentLinkWithResponse(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	// UploadDocumentWithResponse request
	UploadDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadDocumentResponse, error)

	// UploadMultipleDocumentsWithResponse request
	UploadMultipleDocumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadMultipleDocumentsResponse, error)

	// DeleteDocumentWithResponse request
	DeleteDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error)

	// DownloadDocumentWithResponse request
	DownloadDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DownloadDocumentResponse, error)

	// UpdateElementInstanceVariablesWithBodyWithResponse request with any body
	UpdateElementInstanceVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error)

	UpdateElementInstanceVariablesWithResponse(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error)

	// QueryFlowNodeInstancesAlphaWithBodyWithResponse request with any body
	QueryFlowNodeInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error)

	QueryFlowNodeInstancesAlphaWithResponse(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error)

	// QueryIncidentsWithBodyWithResponse request with any body
	QueryIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error)

	QueryIncidentsWithResponse(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error)

	// GetIncidentByKeyWithResponse request
	GetIncidentByKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error)

	// ResolveIncidentWithResponse request
	ResolveIncidentWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ActivateJobsWithBodyWithResponse request with any body
	ActivateJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error)

	ActivateJobsWithResponse(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error)

	// UpdateAJobWithBodyWithResponse request with any body
	UpdateAJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error)

	UpdateAJobWithResponse(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error)

	// CompleteJobWithResponse request
	CompleteJobWithResponse(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error)

	// ReportErrorForJobWithBodyWithResponse request with any body
	ReportErrorForJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error)

	ReportErrorForJobWithResponse(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error)

	// FailJobWithBodyWithResponse request with any body
	FailJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailJobResponse, error)

	FailJobWithResponse(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*FailJobResponse, error)

	// GetStatusOfCamundaLicenseWithResponse request
	GetStatusOfCamundaLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusOfCamundaLicenseResponse, error)

	// CorrelateAMessageWithBodyWithResponse request with any body
	CorrelateAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error)

	CorrelateAMessageWithResponse(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error)

	// PublishAMessageWithBodyWithResponse request with any body
	PublishAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error)

	PublishAMessageWithResponse(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error)

	// CreateProcessInstanceWithBodyWithResponse request with any body
	CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	// QueryProcessInstancesAlphaWithBodyWithResponse request with any body
	QueryProcessInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error)

	QueryProcessInstancesAlphaWithResponse(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error)

	// CancelProcessInstanceWithBodyWithResponse request with any body
	CancelProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error)

	CancelProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error)

	// MigrateProcessInstanceWithBodyWithResponse request with any body
	MigrateProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error)

	MigrateProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error)

	// ModifyProcessInstanceWithBodyWithResponse request with any body
	ModifyProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error)

	ModifyProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)

	// GetResourceContentWithResponse request
	GetResourceContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceContentResponse, error)

	// DeleteResourceWithBodyWithResponse request with any body
	DeleteResourceWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	DeleteResourceWithResponse(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	// BroadcastSignalWithBodyWithResponse request with any body
	BroadcastSignalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error)

	BroadcastSignalWithResponse(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error)

	// GetClusterTypologyWithResponse request
	GetClusterTypologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterTypologyResponse, error)

	// QueryUserTasksAlphaWithBodyWithResponse request with any body
	QueryUserTasksAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error)

	QueryUserTasksAlphaWithResponse(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error)

	// UpdateAUserTaskWithBodyWithResponse request with any body
	UpdateAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error)

	UpdateAUserTaskWithResponse(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error)

	// UnassignAUserTaskWithResponse request
	UnassignAUserTaskWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*UnassignAUserTaskResponse, error)

	// AssignAUserTaskWithBodyWithResponse request with any body
	AssignAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error)

	AssignAUserTaskWithResponse(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error)

	// CompleteAUserTaskWithBodyWithResponse request with any body
	CompleteAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error)

	CompleteAUserTaskWithResponse(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error)

	// QueryUsersAlphaWithBodyWithResponse request with any body
	QueryUsersAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error)

	QueryUsersAlphaWithResponse(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error)
}

type PinInternalClockAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PinInternalClockAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PinInternalClockAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetInternalClockAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetInternalClockAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetInternalClockAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateDecisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluateDecisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateDecisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionDefinitionsAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionDefinitionsAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionDefinitionsAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionDefinitionXmlAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDecisionDefinitionXmlAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionDefinitionXmlAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionRequirementsAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionRequirementsAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionRequirementsAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeployResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeployResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeployResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDocumentLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDocumentLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDocumentLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadMultipleDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadMultipleDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadMultipleDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateElementInstanceVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateElementInstanceVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateElementInstanceVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryFlowNodeInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryFlowNodeInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryFlowNodeInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentByKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ActivateJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportErrorForJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportErrorForJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportErrorForJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FailJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FailJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FailJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusOfCamundaLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusOfCamundaLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusOfCamundaLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrelateAMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CorrelateAMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrelateAMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishAMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishAMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishAMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryProcessInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryProcessInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryProcessInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrateProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MigrateProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrateProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastSignalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BroadcastSignalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastSignalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterTypologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClusterTypologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterTypologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUserTasksAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryUserTasksAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUserTasksAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnassignAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnassignAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnassignAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUsersAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryUsersAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUsersAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PinInternalClockAlphaWithBodyWithResponse request with arbitrary body returning *PinInternalClockAlphaResponse
func (c *ClientWithResponses) PinInternalClockAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error) {
	rsp, err := c.PinInternalClockAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinInternalClockAlphaResponse(rsp)
}

func (c *ClientWithResponses) PinInternalClockAlphaWithResponse(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error) {
	rsp, err := c.PinInternalClockAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinInternalClockAlphaResponse(rsp)
}

// ResetInternalClockAlphaWithResponse request returning *ResetInternalClockAlphaResponse
func (c *ClientWithResponses) ResetInternalClockAlphaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetInternalClockAlphaResponse, error) {
	rsp, err := c.ResetInternalClockAlpha(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetInternalClockAlphaResponse(rsp)
}

// EvaluateDecisionWithBodyWithResponse request with arbitrary body returning *EvaluateDecisionResponse
func (c *ClientWithResponses) EvaluateDecisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error) {
	rsp, err := c.EvaluateDecisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateDecisionResponse(rsp)
}

func (c *ClientWithResponses) EvaluateDecisionWithResponse(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error) {
	rsp, err := c.EvaluateDecision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateDecisionResponse(rsp)
}

// QueryDecisionDefinitionsAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionDefinitionsAlphaResponse
func (c *ClientWithResponses) QueryDecisionDefinitionsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error) {
	rsp, err := c.QueryDecisionDefinitionsAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionDefinitionsAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionDefinitionsAlphaWithResponse(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error) {
	rsp, err := c.QueryDecisionDefinitionsAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionDefinitionsAlphaResponse(rsp)
}

// GetDecisionDefinitionXmlAlphaWithResponse request returning *GetDecisionDefinitionXmlAlphaResponse
func (c *ClientWithResponses) GetDecisionDefinitionXmlAlphaWithResponse(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionXmlAlphaResponse, error) {
	rsp, err := c.GetDecisionDefinitionXmlAlpha(ctx, decisionKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionDefinitionXmlAlphaResponse(rsp)
}

// QueryDecisionInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionInstancesAlphaResponse
func (c *ClientWithResponses) QueryDecisionInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error) {
	rsp, err := c.QueryDecisionInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionInstancesAlphaWithResponse(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error) {
	rsp, err := c.QueryDecisionInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionInstancesAlphaResponse(rsp)
}

// QueryDecisionRequirementsAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionRequirementsAlphaResponse
func (c *ClientWithResponses) QueryDecisionRequirementsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error) {
	rsp, err := c.QueryDecisionRequirementsAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionRequirementsAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionRequirementsAlphaWithResponse(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error) {
	rsp, err := c.QueryDecisionRequirementsAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionRequirementsAlphaResponse(rsp)
}

// DeployResourcesWithResponse request returning *DeployResourcesResponse
func (c *ClientWithResponses) DeployResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeployResourcesResponse, error) {
	rsp, err := c.DeployResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployResourcesResponse(rsp)
}

// CreateDocumentLinkWithBodyWithResponse request with arbitrary body returning *CreateDocumentLinkResponse
func (c *ClientWithResponses) CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLinkWithBody(ctx, documentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

func (c *ClientWithResponses) CreateDocumentLinkWithResponse(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLink(ctx, documentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

// UploadDocumentWithResponse request returning *UploadDocumentResponse
func (c *ClientWithResponses) UploadDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadDocumentResponse, error) {
	rsp, err := c.UploadDocument(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadDocumentResponse(rsp)
}

// UploadMultipleDocumentsWithResponse request returning *UploadMultipleDocumentsResponse
func (c *ClientWithResponses) UploadMultipleDocumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadMultipleDocumentsResponse, error) {
	rsp, err := c.UploadMultipleDocuments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadMultipleDocumentsResponse(rsp)
}

// DeleteDocumentWithResponse request returning *DeleteDocumentResponse
func (c *ClientWithResponses) DeleteDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error) {
	rsp, err := c.DeleteDocument(ctx, documentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDocumentResponse(rsp)
}

// DownloadDocumentWithResponse request returning *DownloadDocumentResponse
func (c *ClientWithResponses) DownloadDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DownloadDocumentResponse, error) {
	rsp, err := c.DownloadDocument(ctx, documentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadDocumentResponse(rsp)
}

// UpdateElementInstanceVariablesWithBodyWithResponse request with arbitrary body returning *UpdateElementInstanceVariablesResponse
func (c *ClientWithResponses) UpdateElementInstanceVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error) {
	rsp, err := c.UpdateElementInstanceVariablesWithBody(ctx, elementInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElementInstanceVariablesResponse(rsp)
}

func (c *ClientWithResponses) UpdateElementInstanceVariablesWithResponse(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error) {
	rsp, err := c.UpdateElementInstanceVariables(ctx, elementInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElementInstanceVariablesResponse(rsp)
}

// QueryFlowNodeInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryFlowNodeInstancesAlphaResponse
func (c *ClientWithResponses) QueryFlowNodeInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error) {
	rsp, err := c.QueryFlowNodeInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFlowNodeInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryFlowNodeInstancesAlphaWithResponse(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error) {
	rsp, err := c.QueryFlowNodeInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFlowNodeInstancesAlphaResponse(rsp)
}

// QueryIncidentsWithBodyWithResponse request with arbitrary body returning *QueryIncidentsResponse
func (c *ClientWithResponses) QueryIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error) {
	rsp, err := c.QueryIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIncidentsResponse(rsp)
}

func (c *ClientWithResponses) QueryIncidentsWithResponse(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error) {
	rsp, err := c.QueryIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIncidentsResponse(rsp)
}

// GetIncidentByKeyWithResponse request returning *GetIncidentByKeyResponse
func (c *ClientWithResponses) GetIncidentByKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error) {
	rsp, err := c.GetIncidentByKey(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentByKeyResponse(rsp)
}

// ResolveIncidentWithResponse request returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncident(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ActivateJobsWithBodyWithResponse request with arbitrary body returning *ActivateJobsResponse
func (c *ClientWithResponses) ActivateJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error) {
	rsp, err := c.ActivateJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateJobsResponse(rsp)
}

func (c *ClientWithResponses) ActivateJobsWithResponse(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error) {
	rsp, err := c.ActivateJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateJobsResponse(rsp)
}

// UpdateAJobWithBodyWithResponse request with arbitrary body returning *UpdateAJobResponse
func (c *ClientWithResponses) UpdateAJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error) {
	rsp, err := c.UpdateAJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAJobResponse(rsp)
}

func (c *ClientWithResponses) UpdateAJobWithResponse(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error) {
	rsp, err := c.UpdateAJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAJobResponse(rsp)
}

// CompleteJobWithResponse request returning *CompleteJobResponse
func (c *ClientWithResponses) CompleteJobWithResponse(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error) {
	rsp, err := c.CompleteJob(ctx, jobKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobResponse(rsp)
}

// ReportErrorForJobWithBodyWithResponse request with arbitrary body returning *ReportErrorForJobResponse
func (c *ClientWithResponses) ReportErrorForJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error) {
	rsp, err := c.ReportErrorForJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportErrorForJobResponse(rsp)
}

func (c *ClientWithResponses) ReportErrorForJobWithResponse(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error) {
	rsp, err := c.ReportErrorForJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportErrorForJobResponse(rsp)
}

// FailJobWithBodyWithResponse request with arbitrary body returning *FailJobResponse
func (c *ClientWithResponses) FailJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailJobResponse, error) {
	rsp, err := c.FailJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailJobResponse(rsp)
}

func (c *ClientWithResponses) FailJobWithResponse(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*FailJobResponse, error) {
	rsp, err := c.FailJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailJobResponse(rsp)
}

// GetStatusOfCamundaLicenseWithResponse request returning *GetStatusOfCamundaLicenseResponse
func (c *ClientWithResponses) GetStatusOfCamundaLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusOfCamundaLicenseResponse, error) {
	rsp, err := c.GetStatusOfCamundaLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusOfCamundaLicenseResponse(rsp)
}

// CorrelateAMessageWithBodyWithResponse request with arbitrary body returning *CorrelateAMessageResponse
func (c *ClientWithResponses) CorrelateAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error) {
	rsp, err := c.CorrelateAMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrelateAMessageResponse(rsp)
}

func (c *ClientWithResponses) CorrelateAMessageWithResponse(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error) {
	rsp, err := c.CorrelateAMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrelateAMessageResponse(rsp)
}

// PublishAMessageWithBodyWithResponse request with arbitrary body returning *PublishAMessageResponse
func (c *ClientWithResponses) PublishAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error) {
	rsp, err := c.PublishAMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishAMessageResponse(rsp)
}

func (c *ClientWithResponses) PublishAMessageWithResponse(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error) {
	rsp, err := c.PublishAMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishAMessageResponse(rsp)
}

// CreateProcessInstanceWithBodyWithResponse request with arbitrary body returning *CreateProcessInstanceResponse
func (c *ClientWithResponses) CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

// QueryProcessInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryProcessInstancesAlphaResponse
func (c *ClientWithResponses) QueryProcessInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error) {
	rsp, err := c.QueryProcessInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProcessInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryProcessInstancesAlphaWithResponse(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error) {
	rsp, err := c.QueryProcessInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProcessInstancesAlphaResponse(rsp)
}

// CancelProcessInstanceWithBodyWithResponse request with arbitrary body returning *CancelProcessInstanceResponse
func (c *ClientWithResponses) CancelProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error) {
	rsp, err := c.CancelProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) CancelProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error) {
	rsp, err := c.CancelProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelProcessInstanceResponse(rsp)
}

// MigrateProcessInstanceWithBodyWithResponse request with arbitrary body returning *MigrateProcessInstanceResponse
func (c *ClientWithResponses) MigrateProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error) {
	rsp, err := c.MigrateProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) MigrateProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error) {
	rsp, err := c.MigrateProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateProcessInstanceResponse(rsp)
}

// ModifyProcessInstanceWithBodyWithResponse request with arbitrary body returning *ModifyProcessInstanceResponse
func (c *ClientWithResponses) ModifyProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error) {
	rsp, err := c.ModifyProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) ModifyProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error) {
	rsp, err := c.ModifyProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProcessInstanceResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// GetResourceContentWithResponse request returning *GetResourceContentResponse
func (c *ClientWithResponses) GetResourceContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceContentResponse, error) {
	rsp, err := c.GetResourceContent(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceContentResponse(rsp)
}

// DeleteResourceWithBodyWithResponse request with arbitrary body returning *DeleteResourceResponse
func (c *ClientWithResponses) DeleteResourceWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResourceWithBody(ctx, resourceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

func (c *ClientWithResponses) DeleteResourceWithResponse(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResource(ctx, resourceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

// BroadcastSignalWithBodyWithResponse request with arbitrary body returning *BroadcastSignalResponse
func (c *ClientWithResponses) BroadcastSignalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error) {
	rsp, err := c.BroadcastSignalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastSignalResponse(rsp)
}

func (c *ClientWithResponses) BroadcastSignalWithResponse(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error) {
	rsp, err := c.BroadcastSignal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastSignalResponse(rsp)
}

// GetClusterTypologyWithResponse request returning *GetClusterTypologyResponse
func (c *ClientWithResponses) GetClusterTypologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterTypologyResponse, error) {
	rsp, err := c.GetClusterTypology(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterTypologyResponse(rsp)
}

// QueryUserTasksAlphaWithBodyWithResponse request with arbitrary body returning *QueryUserTasksAlphaResponse
func (c *ClientWithResponses) QueryUserTasksAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error) {
	rsp, err := c.QueryUserTasksAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserTasksAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryUserTasksAlphaWithResponse(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error) {
	rsp, err := c.QueryUserTasksAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserTasksAlphaResponse(rsp)
}

// UpdateAUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateAUserTaskResponse
func (c *ClientWithResponses) UpdateAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error) {
	rsp, err := c.UpdateAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateAUserTaskWithResponse(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error) {
	rsp, err := c.UpdateAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAUserTaskResponse(rsp)
}

// UnassignAUserTaskWithResponse request returning *UnassignAUserTaskResponse
func (c *ClientWithResponses) UnassignAUserTaskWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*UnassignAUserTaskResponse, error) {
	rsp, err := c.UnassignAUserTask(ctx, userTaskKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnassignAUserTaskResponse(rsp)
}

// AssignAUserTaskWithBodyWithResponse request with arbitrary body returning *AssignAUserTaskResponse
func (c *ClientWithResponses) AssignAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error) {
	rsp, err := c.AssignAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AssignAUserTaskWithResponse(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error) {
	rsp, err := c.AssignAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignAUserTaskResponse(rsp)
}

// CompleteAUserTaskWithBodyWithResponse request with arbitrary body returning *CompleteAUserTaskResponse
func (c *ClientWithResponses) CompleteAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error) {
	rsp, err := c.CompleteAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) CompleteAUserTaskWithResponse(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error) {
	rsp, err := c.CompleteAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteAUserTaskResponse(rsp)
}

// QueryUsersAlphaWithBodyWithResponse request with arbitrary body returning *QueryUsersAlphaResponse
func (c *ClientWithResponses) QueryUsersAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error) {
	rsp, err := c.QueryUsersAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsersAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryUsersAlphaWithResponse(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error) {
	rsp, err := c.QueryUsersAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsersAlphaResponse(rsp)
}

// ParsePinInternalClockAlphaResponse parses an HTTP response from a PinInternalClockAlphaWithResponse call
func ParsePinInternalClockAlphaResponse(rsp *http.Response) (*PinInternalClockAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PinInternalClockAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetInternalClockAlphaResponse parses an HTTP response from a ResetInternalClockAlphaWithResponse call
func ParseResetInternalClockAlphaResponse(rsp *http.Response) (*ResetInternalClockAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetInternalClockAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEvaluateDecisionResponse parses an HTTP response from a EvaluateDecisionWithResponse call
func ParseEvaluateDecisionResponse(rsp *http.Response) (*EvaluateDecisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateDecisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionDefinitionsAlphaResponse parses an HTTP response from a QueryDecisionDefinitionsAlphaWithResponse call
func ParseQueryDecisionDefinitionsAlphaResponse(rsp *http.Response) (*QueryDecisionDefinitionsAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionDefinitionsAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDecisionDefinitionXmlAlphaResponse parses an HTTP response from a GetDecisionDefinitionXmlAlphaWithResponse call
func ParseGetDecisionDefinitionXmlAlphaResponse(rsp *http.Response) (*GetDecisionDefinitionXmlAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionDefinitionXmlAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionInstancesAlphaResponse parses an HTTP response from a QueryDecisionInstancesAlphaWithResponse call
func ParseQueryDecisionInstancesAlphaResponse(rsp *http.Response) (*QueryDecisionInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionRequirementsAlphaResponse parses an HTTP response from a QueryDecisionRequirementsAlphaWithResponse call
func ParseQueryDecisionRequirementsAlphaResponse(rsp *http.Response) (*QueryDecisionRequirementsAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionRequirementsAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeployResourcesResponse parses an HTTP response from a DeployResourcesWithResponse call
func ParseDeployResourcesResponse(rsp *http.Response) (*DeployResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeployResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDocumentLinkResponse parses an HTTP response from a CreateDocumentLinkWithResponse call
func ParseCreateDocumentLinkResponse(rsp *http.Response) (*CreateDocumentLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDocumentLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadDocumentResponse parses an HTTP response from a UploadDocumentWithResponse call
func ParseUploadDocumentResponse(rsp *http.Response) (*UploadDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadMultipleDocumentsResponse parses an HTTP response from a UploadMultipleDocumentsWithResponse call
func ParseUploadMultipleDocumentsResponse(rsp *http.Response) (*UploadMultipleDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadMultipleDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDocumentResponse parses an HTTP response from a DeleteDocumentWithResponse call
func ParseDeleteDocumentResponse(rsp *http.Response) (*DeleteDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDownloadDocumentResponse parses an HTTP response from a DownloadDocumentWithResponse call
func ParseDownloadDocumentResponse(rsp *http.Response) (*DownloadDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateElementInstanceVariablesResponse parses an HTTP response from a UpdateElementInstanceVariablesWithResponse call
func ParseUpdateElementInstanceVariablesResponse(rsp *http.Response) (*UpdateElementInstanceVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateElementInstanceVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryFlowNodeInstancesAlphaResponse parses an HTTP response from a QueryFlowNodeInstancesAlphaWithResponse call
func ParseQueryFlowNodeInstancesAlphaResponse(rsp *http.Response) (*QueryFlowNodeInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryFlowNodeInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryIncidentsResponse parses an HTTP response from a QueryIncidentsWithResponse call
func ParseQueryIncidentsResponse(rsp *http.Response) (*QueryIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentByKeyResponse parses an HTTP response from a GetIncidentByKeyWithResponse call
func ParseGetIncidentByKeyResponse(rsp *http.Response) (*GetIncidentByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseActivateJobsResponse parses an HTTP response from a ActivateJobsWithResponse call
func ParseActivateJobsResponse(rsp *http.Response) (*ActivateJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAJobResponse parses an HTTP response from a UpdateAJobWithResponse call
func ParseUpdateAJobResponse(rsp *http.Response) (*UpdateAJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCompleteJobResponse parses an HTTP response from a CompleteJobWithResponse call
func ParseCompleteJobResponse(rsp *http.Response) (*CompleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportErrorForJobResponse parses an HTTP response from a ReportErrorForJobWithResponse call
func ParseReportErrorForJobResponse(rsp *http.Response) (*ReportErrorForJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportErrorForJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFailJobResponse parses an HTTP response from a FailJobWithResponse call
func ParseFailJobResponse(rsp *http.Response) (*FailJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FailJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusOfCamundaLicenseResponse parses an HTTP response from a GetStatusOfCamundaLicenseWithResponse call
func ParseGetStatusOfCamundaLicenseResponse(rsp *http.Response) (*GetStatusOfCamundaLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusOfCamundaLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCorrelateAMessageResponse parses an HTTP response from a CorrelateAMessageWithResponse call
func ParseCorrelateAMessageResponse(rsp *http.Response) (*CorrelateAMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrelateAMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishAMessageResponse parses an HTTP response from a PublishAMessageWithResponse call
func ParsePublishAMessageResponse(rsp *http.Response) (*PublishAMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishAMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateProcessInstanceResponse parses an HTTP response from a CreateProcessInstanceWithResponse call
func ParseCreateProcessInstanceResponse(rsp *http.Response) (*CreateProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryProcessInstancesAlphaResponse parses an HTTP response from a QueryProcessInstancesAlphaWithResponse call
func ParseQueryProcessInstancesAlphaResponse(rsp *http.Response) (*QueryProcessInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryProcessInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelProcessInstanceResponse parses an HTTP response from a CancelProcessInstanceWithResponse call
func ParseCancelProcessInstanceResponse(rsp *http.Response) (*CancelProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMigrateProcessInstanceResponse parses an HTTP response from a MigrateProcessInstanceWithResponse call
func ParseMigrateProcessInstanceResponse(rsp *http.Response) (*MigrateProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrateProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseModifyProcessInstanceResponse parses an HTTP response from a ModifyProcessInstanceWithResponse call
func ParseModifyProcessInstanceResponse(rsp *http.Response) (*ModifyProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceContentResponse parses an HTTP response from a GetResourceContentWithResponse call
func ParseGetResourceContentResponse(rsp *http.Response) (*GetResourceContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteResourceResponse parses an HTTP response from a DeleteResourceWithResponse call
func ParseDeleteResourceResponse(rsp *http.Response) (*DeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBroadcastSignalResponse parses an HTTP response from a BroadcastSignalWithResponse call
func ParseBroadcastSignalResponse(rsp *http.Response) (*BroadcastSignalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastSignalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusterTypologyResponse parses an HTTP response from a GetClusterTypologyWithResponse call
func ParseGetClusterTypologyResponse(rsp *http.Response) (*GetClusterTypologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterTypologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryUserTasksAlphaResponse parses an HTTP response from a QueryUserTasksAlphaWithResponse call
func ParseQueryUserTasksAlphaResponse(rsp *http.Response) (*QueryUserTasksAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUserTasksAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAUserTaskResponse parses an HTTP response from a UpdateAUserTaskWithResponse call
func ParseUpdateAUserTaskResponse(rsp *http.Response) (*UpdateAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnassignAUserTaskResponse parses an HTTP response from a UnassignAUserTaskWithResponse call
func ParseUnassignAUserTaskResponse(rsp *http.Response) (*UnassignAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnassignAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAssignAUserTaskResponse parses an HTTP response from a AssignAUserTaskWithResponse call
func ParseAssignAUserTaskResponse(rsp *http.Response) (*AssignAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCompleteAUserTaskResponse parses an HTTP response from a CompleteAUserTaskWithResponse call
func ParseCompleteAUserTaskResponse(rsp *http.Response) (*CompleteAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryUsersAlphaResponse parses an HTTP response from a QueryUsersAlphaWithResponse call
func ParseQueryUsersAlphaResponse(rsp *http.Response) (*QueryUsersAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUsersAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"G1j5rSXs3fu7/xcAAP//Zlz1lFbMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
