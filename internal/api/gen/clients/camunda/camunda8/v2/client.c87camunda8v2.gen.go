// Package c87camunda8v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package c87camunda8v2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PartitionInfoRole.
const (
	FOLLOWER PartitionInfoRole = "FOLLOWER"
	INACTIVE PartitionInfoRole = "INACTIVE"
	LEADER   PartitionInfoRole = "LEADER"
)

// BrokerInfo defines model for BrokerInfo.
type BrokerInfo struct {
	Address    *string          `json:"address,omitempty"`
	NodeId     *int             `json:"nodeId,omitempty"`
	Partitions *[]PartitionInfo `json:"partitions,omitempty"`
}

// PartitionInfo defines model for PartitionInfo.
type PartitionInfo struct {
	PartitionId *int               `json:"partitionId,omitempty"`
	Role        *PartitionInfoRole `json:"role,omitempty"`
}

// PartitionInfoRole defines model for PartitionInfo.Role.
type PartitionInfoRole string

// Topology defines model for Topology.
type Topology struct {
	Brokers           *[]BrokerInfo `json:"brokers,omitempty"`
	ClusterSize       *int          `json:"clusterSize,omitempty"`
	PartitionsCount   *int          `json:"partitionsCount,omitempty"`
	ReplicationFactor *int          `json:"replicationFactor,omitempty"`
}

// PinInternalClockAlphaJSONBody defines parameters for PinInternalClockAlpha.
type PinInternalClockAlphaJSONBody struct {
	Timestamp *float32 `json:"timestamp,omitempty"`
}

// EvaluateDecisionJSONBody defines parameters for EvaluateDecision.
type EvaluateDecisionJSONBody struct {
	DecisionDefinitionKey *float32                `json:"decisionDefinitionKey,omitempty"`
	TenantId              *string                 `json:"tenantId,omitempty"`
	Variables             *map[string]interface{} `json:"variables,omitempty"`
}

// QueryDecisionDefinitionsAlphaJSONBody defines parameters for QueryDecisionDefinitionsAlpha.
type QueryDecisionDefinitionsAlphaJSONBody struct {
	Filter *struct {
		DecisionKey               *float32 `json:"decisionKey,omitempty"`
		DecisionRequirementsKey   *float32 `json:"decisionRequirementsKey,omitempty"`
		DmnDecisionId             *string  `json:"dmnDecisionId,omitempty"`
		DmnDecisionName           *string  `json:"dmnDecisionName,omitempty"`
		DmnDecisionRequirementsId *string  `json:"dmnDecisionRequirementsId,omitempty"`
		TenantId                  *string  `json:"tenantId,omitempty"`
		Version                   *float32 `json:"version,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryDecisionInstancesAlphaJSONBody defines parameters for QueryDecisionInstancesAlpha.
type QueryDecisionInstancesAlphaJSONBody struct {
	Filter *struct {
		DecisionDefinitionId      *string  `json:"decisionDefinitionId,omitempty"`
		DecisionDefinitionKey     *float32 `json:"decisionDefinitionKey,omitempty"`
		DecisionDefinitionName    *string  `json:"decisionDefinitionName,omitempty"`
		DecisionDefinitionVersion *float32 `json:"decisionDefinitionVersion,omitempty"`
		EvaluationFailure         *string  `json:"evaluationFailure,omitempty"`
		Key                       *float32 `json:"key,omitempty"`
		ProcessDefinitionKey      *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey        *float32 `json:"processInstanceKey,omitempty"`
		TenantId                  *string  `json:"tenantId,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryDecisionRequirementsAlphaJSONBody defines parameters for QueryDecisionRequirementsAlpha.
type QueryDecisionRequirementsAlphaJSONBody struct {
	Filter *struct {
		DecisionRequirementsKey     *float32 `json:"decisionRequirementsKey,omitempty"`
		DmnDecisionRequirementsId   *string  `json:"dmnDecisionRequirementsId,omitempty"`
		DmnDecisionRequirementsName *string  `json:"dmnDecisionRequirementsName,omitempty"`
		TenantId                    *string  `json:"tenantId,omitempty"`
		Version                     *float32 `json:"version,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// CreateDocumentLinkJSONBody defines parameters for CreateDocumentLink.
type CreateDocumentLinkJSONBody struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// UpdateElementInstanceVariablesJSONBody defines parameters for UpdateElementInstanceVariables.
type UpdateElementInstanceVariablesJSONBody struct {
	Local              *bool                   `json:"local,omitempty"`
	OperationReference *float32                `json:"operationReference,omitempty"`
	Variables          *map[string]interface{} `json:"variables,omitempty"`
}

// QueryFlowNodeInstancesAlphaJSONBody defines parameters for QueryFlowNodeInstancesAlpha.
type QueryFlowNodeInstancesAlphaJSONBody struct {
	Filter *struct {
		FlowNodeId           *string  `json:"flowNodeId,omitempty"`
		FlowNodeInstanceKey  *float32 `json:"flowNodeInstanceKey,omitempty"`
		FlowNodeName         *string  `json:"flowNodeName,omitempty"`
		Incident             *bool    `json:"incident,omitempty"`
		IncidentKey          *float32 `json:"incidentKey,omitempty"`
		ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey   *float32 `json:"processInstanceKey,omitempty"`
		State                *string  `json:"state,omitempty"`
		TenantId             *string  `json:"tenantId,omitempty"`
		TreePath             *string  `json:"treePath,omitempty"`
		Type                 *string  `json:"type,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// QueryIncidentsJSONBody defines parameters for QueryIncidents.
type QueryIncidentsJSONBody struct {
	Filter *struct {
		FlowNodeId           *string  `json:"flowNodeId,omitempty"`
		FlowNodeInstanceId   *string  `json:"flowNodeInstanceId,omitempty"`
		HasActiveOperation   *bool    `json:"hasActiveOperation,omitempty"`
		JobKey               *float32 `json:"jobKey,omitempty"`
		Key                  *float32 `json:"key,omitempty"`
		Message              *string  `json:"message,omitempty"`
		ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
		ProcessInstanceKey   *float32 `json:"processInstanceKey,omitempty"`
		State                *string  `json:"state,omitempty"`
		TenantId             *string  `json:"tenantId,omitempty"`
		Type                 *string  `json:"type,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// ActivateJobsJSONBody defines parameters for ActivateJobs.
type ActivateJobsJSONBody struct {
	FetchVariable     *[]string `json:"fetchVariable,omitempty"`
	MaxJobsToActivate *float32  `json:"maxJobsToActivate,omitempty"`
	RequestTimeout    *float32  `json:"requestTimeout,omitempty"`
	TenantIds         *[]string `json:"tenantIds,omitempty"`
	Timeout           *float32  `json:"timeout,omitempty"`
	Type              *string   `json:"type,omitempty"`
	Worker            *string   `json:"worker,omitempty"`
}

// UpdateAJobJSONBody defines parameters for UpdateAJob.
type UpdateAJobJSONBody struct {
	Changeset *struct {
		Retries *float32 `json:"retries,omitempty"`
		Timeout *float32 `json:"timeout,omitempty"`
	} `json:"changeset,omitempty"`
}

// ReportErrorForJobJSONBody defines parameters for ReportErrorForJob.
type ReportErrorForJobJSONBody struct {
	ErrorCode *string `json:"errorCode,omitempty"`
}

// FailJobJSONBody defines parameters for FailJob.
type FailJobJSONBody struct {
	Retries      *float32 `json:"retries,omitempty"`
	RetryBackOff *float32 `json:"retryBackOff,omitempty"`
}

// CorrelateAMessageJSONBody defines parameters for CorrelateAMessage.
type CorrelateAMessageJSONBody struct {
	CorrelationKey *string                 `json:"correlationKey,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	TenantId       *string                 `json:"tenantId,omitempty"`
	Variables      *map[string]interface{} `json:"variables,omitempty"`
}

// PublishAMessageJSONBody defines parameters for PublishAMessage.
type PublishAMessageJSONBody struct {
	CorrelationKey *string                 `json:"correlationKey,omitempty"`
	MessageId      *string                 `json:"messageId,omitempty"`
	Name           *string                 `json:"name,omitempty"`
	TenantId       *string                 `json:"tenantId,omitempty"`
	TimeToLive     *float32                `json:"timeToLive,omitempty"`
	Variables      *map[string]interface{} `json:"variables,omitempty"`
}

// CreateProcessInstanceJSONBody defines parameters for CreateProcessInstance.
type CreateProcessInstanceJSONBody struct {
	AwaitCompletion      *bool    `json:"awaitCompletion,omitempty"`
	BpmnProcessId        *string  `json:"bpmnProcessId,omitempty"`
	OperationReference   *float32 `json:"operationReference,omitempty"`
	ProcessDefinitionKey *float32 `json:"processDefinitionKey,omitempty"`
	RequestTimeout       *float32 `json:"requestTimeout,omitempty"`
	StartInstructions    *[]struct {
		ElementId *string `json:"elementId,omitempty"`
	} `json:"startInstructions,omitempty"`
	TenantId  *string                 `json:"tenantId,omitempty"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
	Version   *float32                `json:"version,omitempty"`
}

// QueryProcessInstancesAlphaJSONBody defines parameters for QueryProcessInstancesAlpha.
type QueryProcessInstancesAlphaJSONBody struct {
	Filter *struct {
		Key       *[]float32 `json:"key,omitempty"`
		Variables *[]struct {
			Eq   *map[string]interface{} `json:"eq,omitempty"`
			Gt   *map[string]interface{} `json:"gt,omitempty"`
			Gte  *map[string]interface{} `json:"gte,omitempty"`
			Lt   *map[string]interface{} `json:"lt,omitempty"`
			Lte  *map[string]interface{} `json:"lte,omitempty"`
			Name *string                 `json:"name,omitempty"`
		} `json:"variables,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// CancelProcessInstanceJSONBody defines parameters for CancelProcessInstance.
type CancelProcessInstanceJSONBody struct {
	OperationReference *float32 `json:"operationReference,omitempty"`
}

// MigrateProcessInstanceJSONBody defines parameters for MigrateProcessInstance.
type MigrateProcessInstanceJSONBody struct {
	MappingInstructions *[]struct {
		SourceElementId *string `json:"sourceElementId,omitempty"`
		TargetElementId *string `json:"targetElementId,omitempty"`
	} `json:"mappingInstructions,omitempty"`
	OperationReference         *float32 `json:"operationReference,omitempty"`
	TargetProcessDefinitionKey *float32 `json:"targetProcessDefinitionKey,omitempty"`
}

// ModifyProcessInstanceJSONBody defines parameters for ModifyProcessInstance.
type ModifyProcessInstanceJSONBody struct {
	ActivateInstructions *[]struct {
		AncestorElementInstanceKey *float32 `json:"ancestorElementInstanceKey,omitempty"`
		ElementId                  *string  `json:"elementId,omitempty"`
		VariableInstructions       *[]struct {
			ScopeId   *string                 `json:"scopeId,omitempty"`
			Variables *map[string]interface{} `json:"variables,omitempty"`
		} `json:"variableInstructions,omitempty"`
	} `json:"activateInstructions,omitempty"`
	OperationReference    *float32 `json:"operationReference,omitempty"`
	TerminateInstructions *[]struct {
		ElementInstanceKey *float32 `json:"elementInstanceKey,omitempty"`
	} `json:"terminateInstructions,omitempty"`
}

// DeleteResourceJSONBody defines parameters for DeleteResource.
type DeleteResourceJSONBody struct {
	OperationReference *float32 `json:"operationReference,omitempty"`
}

// BroadcastSignalJSONBody defines parameters for BroadcastSignal.
type BroadcastSignalJSONBody struct {
	SignalName *string                 `json:"signalName,omitempty"`
	TenantId   *string                 `json:"tenantId,omitempty"`
	Variables  *map[string]interface{} `json:"variables,omitempty"`
}

// QueryUserTasksAlphaJSONBody defines parameters for QueryUserTasksAlpha.
type QueryUserTasksAlphaJSONBody interface{}

// UpdateAUserTaskJSONBody defines parameters for UpdateAUserTask.
type UpdateAUserTaskJSONBody struct {
	Action    *string `json:"action,omitempty"`
	Changeset *struct {
		CandidateGroups *[]string `json:"candidateGroups,omitempty"`
		CandidateUsers  *[]string `json:"candidateUsers,omitempty"`
		DueDate         *string   `json:"dueDate,omitempty"`
		FollowUpDate    *string   `json:"followUpDate,omitempty"`
	} `json:"changeset,omitempty"`
}

// AssignAUserTaskJSONBody defines parameters for AssignAUserTask.
type AssignAUserTaskJSONBody struct {
	Action        *string `json:"action,omitempty"`
	AllowOverride *bool   `json:"allowOverride,omitempty"`
	Assignee      *string `json:"assignee,omitempty"`
}

// CompleteAUserTaskJSONBody defines parameters for CompleteAUserTask.
type CompleteAUserTaskJSONBody struct {
	Action    *string                 `json:"action,omitempty"`
	Variables *map[string]interface{} `json:"variables,omitempty"`
}

// QueryUsersAlphaJSONBody defines parameters for QueryUsersAlpha.
type QueryUsersAlphaJSONBody struct {
	Filter *struct {
		Email    *string `json:"email,omitempty"`
		Name     *string `json:"name,omitempty"`
		Username *string `json:"username,omitempty"`
	} `json:"filter,omitempty"`
	Page *struct {
		From         *float32                  `json:"from,omitempty"`
		Limit        *float32                  `json:"limit,omitempty"`
		SearchAfter  *[]map[string]interface{} `json:"searchAfter,omitempty"`
		SearchBefore *[]map[string]interface{} `json:"searchBefore,omitempty"`
	} `json:"page,omitempty"`
	Sort *[]struct {
		Field *string `json:"field,omitempty"`
		Order *string `json:"order,omitempty"`
	} `json:"sort,omitempty"`
}

// PinInternalClockAlphaJSONRequestBody defines body for PinInternalClockAlpha for application/json ContentType.
type PinInternalClockAlphaJSONRequestBody PinInternalClockAlphaJSONBody

// EvaluateDecisionJSONRequestBody defines body for EvaluateDecision for application/json ContentType.
type EvaluateDecisionJSONRequestBody EvaluateDecisionJSONBody

// QueryDecisionDefinitionsAlphaJSONRequestBody defines body for QueryDecisionDefinitionsAlpha for application/json ContentType.
type QueryDecisionDefinitionsAlphaJSONRequestBody QueryDecisionDefinitionsAlphaJSONBody

// QueryDecisionInstancesAlphaJSONRequestBody defines body for QueryDecisionInstancesAlpha for application/json ContentType.
type QueryDecisionInstancesAlphaJSONRequestBody QueryDecisionInstancesAlphaJSONBody

// QueryDecisionRequirementsAlphaJSONRequestBody defines body for QueryDecisionRequirementsAlpha for application/json ContentType.
type QueryDecisionRequirementsAlphaJSONRequestBody QueryDecisionRequirementsAlphaJSONBody

// CreateDocumentLinkJSONRequestBody defines body for CreateDocumentLink for application/json ContentType.
type CreateDocumentLinkJSONRequestBody CreateDocumentLinkJSONBody

// UpdateElementInstanceVariablesJSONRequestBody defines body for UpdateElementInstanceVariables for application/json ContentType.
type UpdateElementInstanceVariablesJSONRequestBody UpdateElementInstanceVariablesJSONBody

// QueryFlowNodeInstancesAlphaJSONRequestBody defines body for QueryFlowNodeInstancesAlpha for application/json ContentType.
type QueryFlowNodeInstancesAlphaJSONRequestBody QueryFlowNodeInstancesAlphaJSONBody

// QueryIncidentsJSONRequestBody defines body for QueryIncidents for application/json ContentType.
type QueryIncidentsJSONRequestBody QueryIncidentsJSONBody

// ActivateJobsJSONRequestBody defines body for ActivateJobs for application/json ContentType.
type ActivateJobsJSONRequestBody ActivateJobsJSONBody

// UpdateAJobJSONRequestBody defines body for UpdateAJob for application/json ContentType.
type UpdateAJobJSONRequestBody UpdateAJobJSONBody

// ReportErrorForJobJSONRequestBody defines body for ReportErrorForJob for application/json ContentType.
type ReportErrorForJobJSONRequestBody ReportErrorForJobJSONBody

// FailJobJSONRequestBody defines body for FailJob for application/json ContentType.
type FailJobJSONRequestBody FailJobJSONBody

// CorrelateAMessageJSONRequestBody defines body for CorrelateAMessage for application/json ContentType.
type CorrelateAMessageJSONRequestBody CorrelateAMessageJSONBody

// PublishAMessageJSONRequestBody defines body for PublishAMessage for application/json ContentType.
type PublishAMessageJSONRequestBody PublishAMessageJSONBody

// CreateProcessInstanceJSONRequestBody defines body for CreateProcessInstance for application/json ContentType.
type CreateProcessInstanceJSONRequestBody CreateProcessInstanceJSONBody

// QueryProcessInstancesAlphaJSONRequestBody defines body for QueryProcessInstancesAlpha for application/json ContentType.
type QueryProcessInstancesAlphaJSONRequestBody QueryProcessInstancesAlphaJSONBody

// CancelProcessInstanceJSONRequestBody defines body for CancelProcessInstance for application/json ContentType.
type CancelProcessInstanceJSONRequestBody CancelProcessInstanceJSONBody

// MigrateProcessInstanceJSONRequestBody defines body for MigrateProcessInstance for application/json ContentType.
type MigrateProcessInstanceJSONRequestBody MigrateProcessInstanceJSONBody

// ModifyProcessInstanceJSONRequestBody defines body for ModifyProcessInstance for application/json ContentType.
type ModifyProcessInstanceJSONRequestBody ModifyProcessInstanceJSONBody

// DeleteResourceJSONRequestBody defines body for DeleteResource for application/json ContentType.
type DeleteResourceJSONRequestBody DeleteResourceJSONBody

// BroadcastSignalJSONRequestBody defines body for BroadcastSignal for application/json ContentType.
type BroadcastSignalJSONRequestBody BroadcastSignalJSONBody

// QueryUserTasksAlphaJSONRequestBody defines body for QueryUserTasksAlpha for application/json ContentType.
type QueryUserTasksAlphaJSONRequestBody QueryUserTasksAlphaJSONBody

// UpdateAUserTaskJSONRequestBody defines body for UpdateAUserTask for application/json ContentType.
type UpdateAUserTaskJSONRequestBody UpdateAUserTaskJSONBody

// AssignAUserTaskJSONRequestBody defines body for AssignAUserTask for application/json ContentType.
type AssignAUserTaskJSONRequestBody AssignAUserTaskJSONBody

// CompleteAUserTaskJSONRequestBody defines body for CompleteAUserTask for application/json ContentType.
type CompleteAUserTaskJSONRequestBody CompleteAUserTaskJSONBody

// QueryUsersAlphaJSONRequestBody defines body for QueryUsersAlpha for application/json ContentType.
type QueryUsersAlphaJSONRequestBody QueryUsersAlphaJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PinInternalClockAlphaWithBody request with any body
	PinInternalClockAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PinInternalClockAlpha(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetInternalClockAlpha request
	ResetInternalClockAlpha(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvaluateDecisionWithBody request with any body
	EvaluateDecisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvaluateDecision(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionDefinitionsAlphaWithBody request with any body
	QueryDecisionDefinitionsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionDefinitionsAlpha(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDecisionDefinitionXmlAlpha request
	GetDecisionDefinitionXmlAlpha(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionInstancesAlphaWithBody request with any body
	QueryDecisionInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionInstancesAlpha(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryDecisionRequirementsAlphaWithBody request with any body
	QueryDecisionRequirementsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryDecisionRequirementsAlpha(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeployResources request
	DeployResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDocumentLinkWithBody request with any body
	CreateDocumentLinkWithBody(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDocumentLink(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadDocument request
	UploadDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadMultipleDocuments request
	UploadMultipleDocuments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDocument request
	DeleteDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadDocument request
	DownloadDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateElementInstanceVariablesWithBody request with any body
	UpdateElementInstanceVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateElementInstanceVariables(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryFlowNodeInstancesAlphaWithBody request with any body
	QueryFlowNodeInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryFlowNodeInstancesAlpha(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryIncidentsWithBody request with any body
	QueryIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryIncidents(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentByKey request
	GetIncidentByKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncident request
	ResolveIncident(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateJobsWithBody request with any body
	ActivateJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActivateJobs(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAJobWithBody request with any body
	UpdateAJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAJob(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteJob request
	CompleteJob(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportErrorForJobWithBody request with any body
	ReportErrorForJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportErrorForJob(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FailJobWithBody request with any body
	FailJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FailJob(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusOfCamundaLicense request
	GetStatusOfCamundaLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CorrelateAMessageWithBody request with any body
	CorrelateAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CorrelateAMessage(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishAMessageWithBody request with any body
	PublishAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishAMessage(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProcessInstanceWithBody request with any body
	CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryProcessInstancesAlphaWithBody request with any body
	QueryProcessInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryProcessInstancesAlpha(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelProcessInstanceWithBody request with any body
	CancelProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelProcessInstance(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrateProcessInstanceWithBody request with any body
	MigrateProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MigrateProcessInstance(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyProcessInstanceWithBody request with any body
	ModifyProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyProcessInstance(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceContent request
	GetResourceContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResourceWithBody request with any body
	DeleteResourceWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteResource(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BroadcastSignalWithBody request with any body
	BroadcastSignalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BroadcastSignal(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterTopology request
	GetClusterTopology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUserTasksAlphaWithBody request with any body
	QueryUserTasksAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUserTasksAlpha(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAUserTaskWithBody request with any body
	UpdateAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAUserTask(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnassignAUserTask request
	UnassignAUserTask(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignAUserTaskWithBody request with any body
	AssignAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignAUserTask(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteAUserTaskWithBody request with any body
	CompleteAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteAUserTask(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUsersAlphaWithBody request with any body
	QueryUsersAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUsersAlpha(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PinInternalClockAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinInternalClockAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinInternalClockAlpha(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinInternalClockAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetInternalClockAlpha(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetInternalClockAlphaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateDecisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateDecisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvaluateDecision(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvaluateDecisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionDefinitionsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionDefinitionsAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionDefinitionsAlpha(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionDefinitionsAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDecisionDefinitionXmlAlpha(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDecisionDefinitionXmlAlphaRequest(c.Server, decisionKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionInstancesAlpha(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionRequirementsAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionRequirementsAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryDecisionRequirementsAlpha(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryDecisionRequirementsAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployResources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployResourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLinkWithBody(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequestWithBody(c.Server, documentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDocumentLink(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDocumentLinkRequest(c.Server, documentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadDocumentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadMultipleDocuments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadMultipleDocumentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDocumentRequest(c.Server, documentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadDocument(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadDocumentRequest(c.Server, documentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElementInstanceVariablesWithBody(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElementInstanceVariablesRequestWithBody(c.Server, elementInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateElementInstanceVariables(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateElementInstanceVariablesRequest(c.Server, elementInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFlowNodeInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFlowNodeInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFlowNodeInstancesAlpha(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFlowNodeInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIncidentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIncidentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryIncidents(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryIncidentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentByKey(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentByKeyRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncident(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequest(c.Server, incidentKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateJobs(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAJob(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteJob(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteJobRequest(c.Server, jobKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportErrorForJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportErrorForJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportErrorForJob(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportErrorForJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailJobWithBody(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailJobRequestWithBody(c.Server, jobKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailJob(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailJobRequest(c.Server, jobKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusOfCamundaLicense(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusOfCamundaLicenseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrelateAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrelateAMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CorrelateAMessage(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCorrelateAMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishAMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishAMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishAMessage(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishAMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProcessInstance(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProcessInstanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProcessInstancesAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProcessInstancesAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryProcessInstancesAlpha(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryProcessInstancesAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelProcessInstance(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateProcessInstance(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProcessInstanceWithBody(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProcessInstanceRequestWithBody(c.Server, processInstanceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProcessInstance(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProcessInstanceRequest(c.Server, processInstanceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceContent(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceContentRequest(c.Server, resourceKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResourceWithBody(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequestWithBody(c.Server, resourceKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResource(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequest(c.Server, resourceKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastSignalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastSignalRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BroadcastSignal(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBroadcastSignalRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterTopology(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterTopologyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserTasksAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserTasksAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserTasksAlpha(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserTasksAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAUserTask(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnassignAUserTask(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnassignAUserTaskRequest(c.Server, userTaskKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignAUserTask(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteAUserTaskWithBody(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteAUserTaskRequestWithBody(c.Server, userTaskKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteAUserTask(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteAUserTaskRequest(c.Server, userTaskKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsersAlphaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsersAlphaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUsersAlpha(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUsersAlphaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPinInternalClockAlphaRequest calls the generic PinInternalClockAlpha builder with application/json body
func NewPinInternalClockAlphaRequest(server string, body PinInternalClockAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPinInternalClockAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewPinInternalClockAlphaRequestWithBody generates requests for PinInternalClockAlpha with any type of body
func NewPinInternalClockAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetInternalClockAlphaRequest generates requests for ResetInternalClockAlpha
func NewResetInternalClockAlphaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clock/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvaluateDecisionRequest calls the generic EvaluateDecision builder with application/json body
func NewEvaluateDecisionRequest(server string, body EvaluateDecisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvaluateDecisionRequestWithBody(server, "application/json", bodyReader)
}

// NewEvaluateDecisionRequestWithBody generates requests for EvaluateDecision with any type of body
func NewEvaluateDecisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/evaluation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryDecisionDefinitionsAlphaRequest calls the generic QueryDecisionDefinitionsAlpha builder with application/json body
func NewQueryDecisionDefinitionsAlphaRequest(server string, body QueryDecisionDefinitionsAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionDefinitionsAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionDefinitionsAlphaRequestWithBody generates requests for QueryDecisionDefinitionsAlpha with any type of body
func NewQueryDecisionDefinitionsAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDecisionDefinitionXmlAlphaRequest generates requests for GetDecisionDefinitionXmlAlpha
func NewGetDecisionDefinitionXmlAlphaRequest(server string, decisionKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "decisionKey", runtime.ParamLocationPath, decisionKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-definitions/%s/xml", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryDecisionInstancesAlphaRequest calls the generic QueryDecisionInstancesAlpha builder with application/json body
func NewQueryDecisionInstancesAlphaRequest(server string, body QueryDecisionInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionInstancesAlphaRequestWithBody generates requests for QueryDecisionInstancesAlpha with any type of body
func NewQueryDecisionInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryDecisionRequirementsAlphaRequest calls the generic QueryDecisionRequirementsAlpha builder with application/json body
func NewQueryDecisionRequirementsAlphaRequest(server string, body QueryDecisionRequirementsAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryDecisionRequirementsAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryDecisionRequirementsAlphaRequestWithBody generates requests for QueryDecisionRequirementsAlpha with any type of body
func NewQueryDecisionRequirementsAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decision-requirements/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeployResourcesRequest generates requests for DeployResources
func NewDeployResourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deployments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDocumentLinkRequest calls the generic CreateDocumentLink builder with application/json body
func NewCreateDocumentLinkRequest(server string, documentId string, body CreateDocumentLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDocumentLinkRequestWithBody(server, documentId, "application/json", bodyReader)
}

// NewCreateDocumentLinkRequestWithBody generates requests for CreateDocumentLink with any type of body
func NewCreateDocumentLinkRequestWithBody(server string, documentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/document/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadDocumentRequest generates requests for UploadDocument
func NewUploadDocumentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadMultipleDocumentsRequest generates requests for UploadMultipleDocuments
func NewUploadMultipleDocumentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDocumentRequest generates requests for DeleteDocument
func NewDeleteDocumentRequest(server string, documentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadDocumentRequest generates requests for DownloadDocument
func NewDownloadDocumentRequest(server string, documentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "documentId", runtime.ParamLocationPath, documentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateElementInstanceVariablesRequest calls the generic UpdateElementInstanceVariables builder with application/json body
func NewUpdateElementInstanceVariablesRequest(server string, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateElementInstanceVariablesRequestWithBody(server, elementInstanceKey, "application/json", bodyReader)
}

// NewUpdateElementInstanceVariablesRequestWithBody generates requests for UpdateElementInstanceVariables with any type of body
func NewUpdateElementInstanceVariablesRequestWithBody(server string, elementInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "elementInstanceKey", runtime.ParamLocationPath, elementInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/element-instances/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryFlowNodeInstancesAlphaRequest calls the generic QueryFlowNodeInstancesAlpha builder with application/json body
func NewQueryFlowNodeInstancesAlphaRequest(server string, body QueryFlowNodeInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryFlowNodeInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryFlowNodeInstancesAlphaRequestWithBody generates requests for QueryFlowNodeInstancesAlpha with any type of body
func NewQueryFlowNodeInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flownode-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryIncidentsRequest calls the generic QueryIncidents builder with application/json body
func NewQueryIncidentsRequest(server string, body QueryIncidentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryIncidentsRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryIncidentsRequestWithBody generates requests for QueryIncidents with any type of body
func NewQueryIncidentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentByKeyRequest generates requests for GetIncidentByKey
func NewGetIncidentByKeyRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResolveIncidentRequest generates requests for ResolveIncident
func NewResolveIncidentRequest(server string, incidentKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentKey", runtime.ParamLocationPath, incidentKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s/resolution", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActivateJobsRequest calls the generic ActivateJobs builder with application/json body
func NewActivateJobsRequest(server string, body ActivateJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewActivateJobsRequestWithBody generates requests for ActivateJobs with any type of body
func NewActivateJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/activation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAJobRequest calls the generic UpdateAJob builder with application/json body
func NewUpdateAJobRequest(server string, jobKey string, body UpdateAJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewUpdateAJobRequestWithBody generates requests for UpdateAJob with any type of body
func NewUpdateAJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteJobRequest generates requests for CompleteJob
func NewCompleteJobRequest(server string, jobKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportErrorForJobRequest calls the generic ReportErrorForJob builder with application/json body
func NewReportErrorForJobRequest(server string, jobKey string, body ReportErrorForJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportErrorForJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewReportErrorForJobRequestWithBody generates requests for ReportErrorForJob with any type of body
func NewReportErrorForJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/error", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFailJobRequest calls the generic FailJob builder with application/json body
func NewFailJobRequest(server string, jobKey string, body FailJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFailJobRequestWithBody(server, jobKey, "application/json", bodyReader)
}

// NewFailJobRequestWithBody generates requests for FailJob with any type of body
func NewFailJobRequestWithBody(server string, jobKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobKey", runtime.ParamLocationPath, jobKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/failure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusOfCamundaLicenseRequest generates requests for GetStatusOfCamundaLicense
func NewGetStatusOfCamundaLicenseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/license")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCorrelateAMessageRequest calls the generic CorrelateAMessage builder with application/json body
func NewCorrelateAMessageRequest(server string, body CorrelateAMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCorrelateAMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewCorrelateAMessageRequestWithBody generates requests for CorrelateAMessage with any type of body
func NewCorrelateAMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/correlation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishAMessageRequest calls the generic PublishAMessage builder with application/json body
func NewPublishAMessageRequest(server string, body PublishAMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublishAMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPublishAMessageRequestWithBody generates requests for PublishAMessage with any type of body
func NewPublishAMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/publication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateProcessInstanceRequest calls the generic CreateProcessInstance builder with application/json body
func NewCreateProcessInstanceRequest(server string, body CreateProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProcessInstanceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProcessInstanceRequestWithBody generates requests for CreateProcessInstance with any type of body
func NewCreateProcessInstanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryProcessInstancesAlphaRequest calls the generic QueryProcessInstancesAlpha builder with application/json body
func NewQueryProcessInstancesAlphaRequest(server string, body QueryProcessInstancesAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryProcessInstancesAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryProcessInstancesAlphaRequestWithBody generates requests for QueryProcessInstancesAlpha with any type of body
func NewQueryProcessInstancesAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelProcessInstanceRequest calls the generic CancelProcessInstance builder with application/json body
func NewCancelProcessInstanceRequest(server string, processInstanceKey string, body CancelProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewCancelProcessInstanceRequestWithBody generates requests for CancelProcessInstance with any type of body
func NewCancelProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/cancellation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigrateProcessInstanceRequest calls the generic MigrateProcessInstance builder with application/json body
func NewMigrateProcessInstanceRequest(server string, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMigrateProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewMigrateProcessInstanceRequestWithBody generates requests for MigrateProcessInstance with any type of body
func NewMigrateProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/migration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyProcessInstanceRequest calls the generic ModifyProcessInstance builder with application/json body
func NewModifyProcessInstanceRequest(server string, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyProcessInstanceRequestWithBody(server, processInstanceKey, "application/json", bodyReader)
}

// NewModifyProcessInstanceRequestWithBody generates requests for ModifyProcessInstance with any type of body
func NewModifyProcessInstanceRequestWithBody(server string, processInstanceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processInstanceKey", runtime.ParamLocationPath, processInstanceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/process-instances/%s/modification", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceContentRequest generates requests for GetResourceContent
func NewGetResourceContentRequest(server string, resourceKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/content", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteResourceRequest calls the generic DeleteResource builder with application/json body
func NewDeleteResourceRequest(server string, resourceKey string, body DeleteResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteResourceRequestWithBody(server, resourceKey, "application/json", bodyReader)
}

// NewDeleteResourceRequestWithBody generates requests for DeleteResource with any type of body
func NewDeleteResourceRequestWithBody(server string, resourceKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceKey", runtime.ParamLocationPath, resourceKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s/deletion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBroadcastSignalRequest calls the generic BroadcastSignal builder with application/json body
func NewBroadcastSignalRequest(server string, body BroadcastSignalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBroadcastSignalRequestWithBody(server, "application/json", bodyReader)
}

// NewBroadcastSignalRequestWithBody generates requests for BroadcastSignal with any type of body
func NewBroadcastSignalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/signals/broadcast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterTopologyRequest generates requests for GetClusterTopology
func NewGetClusterTopologyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryUserTasksAlphaRequest calls the generic QueryUserTasksAlpha builder with application/json body
func NewQueryUserTasksAlphaRequest(server string, body QueryUserTasksAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUserTasksAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryUserTasksAlphaRequestWithBody generates requests for QueryUserTasksAlpha with any type of body
func NewQueryUserTasksAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAUserTaskRequest calls the generic UpdateAUserTask builder with application/json body
func NewUpdateAUserTaskRequest(server string, userTaskKey string, body UpdateAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewUpdateAUserTaskRequestWithBody generates requests for UpdateAUserTask with any type of body
func NewUpdateAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnassignAUserTaskRequest generates requests for UnassignAUserTask
func NewUnassignAUserTaskRequest(server string, userTaskKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignee", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignAUserTaskRequest calls the generic AssignAUserTask builder with application/json body
func NewAssignAUserTaskRequest(server string, userTaskKey string, body AssignAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewAssignAUserTaskRequestWithBody generates requests for AssignAUserTask with any type of body
func NewAssignAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/assignment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteAUserTaskRequest calls the generic CompleteAUserTask builder with application/json body
func NewCompleteAUserTaskRequest(server string, userTaskKey string, body CompleteAUserTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteAUserTaskRequestWithBody(server, userTaskKey, "application/json", bodyReader)
}

// NewCompleteAUserTaskRequestWithBody generates requests for CompleteAUserTask with any type of body
func NewCompleteAUserTaskRequestWithBody(server string, userTaskKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userTaskKey", runtime.ParamLocationPath, userTaskKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user-tasks/%s/completion", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUsersAlphaRequest calls the generic QueryUsersAlpha builder with application/json body
func NewQueryUsersAlphaRequest(server string, body QueryUsersAlphaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUsersAlphaRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryUsersAlphaRequestWithBody generates requests for QueryUsersAlpha with any type of body
func NewQueryUsersAlphaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PinInternalClockAlphaWithBodyWithResponse request with any body
	PinInternalClockAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error)

	PinInternalClockAlphaWithResponse(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error)

	// ResetInternalClockAlphaWithResponse request
	ResetInternalClockAlphaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetInternalClockAlphaResponse, error)

	// EvaluateDecisionWithBodyWithResponse request with any body
	EvaluateDecisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error)

	EvaluateDecisionWithResponse(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error)

	// QueryDecisionDefinitionsAlphaWithBodyWithResponse request with any body
	QueryDecisionDefinitionsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error)

	QueryDecisionDefinitionsAlphaWithResponse(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error)

	// GetDecisionDefinitionXmlAlphaWithResponse request
	GetDecisionDefinitionXmlAlphaWithResponse(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionXmlAlphaResponse, error)

	// QueryDecisionInstancesAlphaWithBodyWithResponse request with any body
	QueryDecisionInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error)

	QueryDecisionInstancesAlphaWithResponse(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error)

	// QueryDecisionRequirementsAlphaWithBodyWithResponse request with any body
	QueryDecisionRequirementsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error)

	QueryDecisionRequirementsAlphaWithResponse(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error)

	// DeployResourcesWithResponse request
	DeployResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeployResourcesResponse, error)

	// CreateDocumentLinkWithBodyWithResponse request with any body
	CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	CreateDocumentLinkWithResponse(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error)

	// UploadDocumentWithResponse request
	UploadDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadDocumentResponse, error)

	// UploadMultipleDocumentsWithResponse request
	UploadMultipleDocumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadMultipleDocumentsResponse, error)

	// DeleteDocumentWithResponse request
	DeleteDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error)

	// DownloadDocumentWithResponse request
	DownloadDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DownloadDocumentResponse, error)

	// UpdateElementInstanceVariablesWithBodyWithResponse request with any body
	UpdateElementInstanceVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error)

	UpdateElementInstanceVariablesWithResponse(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error)

	// QueryFlowNodeInstancesAlphaWithBodyWithResponse request with any body
	QueryFlowNodeInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error)

	QueryFlowNodeInstancesAlphaWithResponse(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error)

	// QueryIncidentsWithBodyWithResponse request with any body
	QueryIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error)

	QueryIncidentsWithResponse(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error)

	// GetIncidentByKeyWithResponse request
	GetIncidentByKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error)

	// ResolveIncidentWithResponse request
	ResolveIncidentWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// ActivateJobsWithBodyWithResponse request with any body
	ActivateJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error)

	ActivateJobsWithResponse(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error)

	// UpdateAJobWithBodyWithResponse request with any body
	UpdateAJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error)

	UpdateAJobWithResponse(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error)

	// CompleteJobWithResponse request
	CompleteJobWithResponse(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error)

	// ReportErrorForJobWithBodyWithResponse request with any body
	ReportErrorForJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error)

	ReportErrorForJobWithResponse(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error)

	// FailJobWithBodyWithResponse request with any body
	FailJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailJobResponse, error)

	FailJobWithResponse(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*FailJobResponse, error)

	// GetStatusOfCamundaLicenseWithResponse request
	GetStatusOfCamundaLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusOfCamundaLicenseResponse, error)

	// CorrelateAMessageWithBodyWithResponse request with any body
	CorrelateAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error)

	CorrelateAMessageWithResponse(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error)

	// PublishAMessageWithBodyWithResponse request with any body
	PublishAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error)

	PublishAMessageWithResponse(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error)

	// CreateProcessInstanceWithBodyWithResponse request with any body
	CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error)

	// QueryProcessInstancesAlphaWithBodyWithResponse request with any body
	QueryProcessInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error)

	QueryProcessInstancesAlphaWithResponse(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error)

	// CancelProcessInstanceWithBodyWithResponse request with any body
	CancelProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error)

	CancelProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error)

	// MigrateProcessInstanceWithBodyWithResponse request with any body
	MigrateProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error)

	MigrateProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error)

	// ModifyProcessInstanceWithBodyWithResponse request with any body
	ModifyProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error)

	ModifyProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)

	// GetResourceContentWithResponse request
	GetResourceContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceContentResponse, error)

	// DeleteResourceWithBodyWithResponse request with any body
	DeleteResourceWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	DeleteResourceWithResponse(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	// BroadcastSignalWithBodyWithResponse request with any body
	BroadcastSignalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error)

	BroadcastSignalWithResponse(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error)

	// GetClusterTopologyWithResponse request
	GetClusterTopologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterTopologyResponse, error)

	// QueryUserTasksAlphaWithBodyWithResponse request with any body
	QueryUserTasksAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error)

	QueryUserTasksAlphaWithResponse(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error)

	// UpdateAUserTaskWithBodyWithResponse request with any body
	UpdateAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error)

	UpdateAUserTaskWithResponse(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error)

	// UnassignAUserTaskWithResponse request
	UnassignAUserTaskWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*UnassignAUserTaskResponse, error)

	// AssignAUserTaskWithBodyWithResponse request with any body
	AssignAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error)

	AssignAUserTaskWithResponse(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error)

	// CompleteAUserTaskWithBodyWithResponse request with any body
	CompleteAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error)

	CompleteAUserTaskWithResponse(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error)

	// QueryUsersAlphaWithBodyWithResponse request with any body
	QueryUsersAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error)

	QueryUsersAlphaWithResponse(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error)
}

type PinInternalClockAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PinInternalClockAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PinInternalClockAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetInternalClockAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetInternalClockAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetInternalClockAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EvaluateDecisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EvaluateDecisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvaluateDecisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionDefinitionsAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionDefinitionsAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionDefinitionsAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDecisionDefinitionXmlAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDecisionDefinitionXmlAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDecisionDefinitionXmlAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryDecisionRequirementsAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryDecisionRequirementsAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryDecisionRequirementsAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeployResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeployResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeployResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDocumentLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateDocumentLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDocumentLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadMultipleDocumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UploadMultipleDocumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadMultipleDocumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateElementInstanceVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateElementInstanceVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateElementInstanceVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryFlowNodeInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryFlowNodeInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryFlowNodeInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentByKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIncidentByKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentByKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ActivateJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportErrorForJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReportErrorForJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportErrorForJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FailJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r FailJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FailJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusOfCamundaLicenseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusOfCamundaLicenseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusOfCamundaLicenseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CorrelateAMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CorrelateAMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CorrelateAMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishAMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishAMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishAMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryProcessInstancesAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryProcessInstancesAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryProcessInstancesAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CancelProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrateProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MigrateProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrateProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyProcessInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ModifyProcessInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyProcessInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResourceContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BroadcastSignalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BroadcastSignalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BroadcastSignalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterTopologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Topology
}

// Status returns HTTPResponse.Status
func (r GetClusterTopologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterTopologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUserTasksAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryUserTasksAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUserTasksAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnassignAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnassignAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnassignAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AssignAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteAUserTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CompleteAUserTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteAUserTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUsersAlphaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r QueryUsersAlphaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUsersAlphaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PinInternalClockAlphaWithBodyWithResponse request with arbitrary body returning *PinInternalClockAlphaResponse
func (c *ClientWithResponses) PinInternalClockAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error) {
	rsp, err := c.PinInternalClockAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinInternalClockAlphaResponse(rsp)
}

func (c *ClientWithResponses) PinInternalClockAlphaWithResponse(ctx context.Context, body PinInternalClockAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*PinInternalClockAlphaResponse, error) {
	rsp, err := c.PinInternalClockAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinInternalClockAlphaResponse(rsp)
}

// ResetInternalClockAlphaWithResponse request returning *ResetInternalClockAlphaResponse
func (c *ClientWithResponses) ResetInternalClockAlphaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetInternalClockAlphaResponse, error) {
	rsp, err := c.ResetInternalClockAlpha(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetInternalClockAlphaResponse(rsp)
}

// EvaluateDecisionWithBodyWithResponse request with arbitrary body returning *EvaluateDecisionResponse
func (c *ClientWithResponses) EvaluateDecisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error) {
	rsp, err := c.EvaluateDecisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateDecisionResponse(rsp)
}

func (c *ClientWithResponses) EvaluateDecisionWithResponse(ctx context.Context, body EvaluateDecisionJSONRequestBody, reqEditors ...RequestEditorFn) (*EvaluateDecisionResponse, error) {
	rsp, err := c.EvaluateDecision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEvaluateDecisionResponse(rsp)
}

// QueryDecisionDefinitionsAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionDefinitionsAlphaResponse
func (c *ClientWithResponses) QueryDecisionDefinitionsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error) {
	rsp, err := c.QueryDecisionDefinitionsAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionDefinitionsAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionDefinitionsAlphaWithResponse(ctx context.Context, body QueryDecisionDefinitionsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionDefinitionsAlphaResponse, error) {
	rsp, err := c.QueryDecisionDefinitionsAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionDefinitionsAlphaResponse(rsp)
}

// GetDecisionDefinitionXmlAlphaWithResponse request returning *GetDecisionDefinitionXmlAlphaResponse
func (c *ClientWithResponses) GetDecisionDefinitionXmlAlphaWithResponse(ctx context.Context, decisionKey string, reqEditors ...RequestEditorFn) (*GetDecisionDefinitionXmlAlphaResponse, error) {
	rsp, err := c.GetDecisionDefinitionXmlAlpha(ctx, decisionKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDecisionDefinitionXmlAlphaResponse(rsp)
}

// QueryDecisionInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionInstancesAlphaResponse
func (c *ClientWithResponses) QueryDecisionInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error) {
	rsp, err := c.QueryDecisionInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionInstancesAlphaWithResponse(ctx context.Context, body QueryDecisionInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionInstancesAlphaResponse, error) {
	rsp, err := c.QueryDecisionInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionInstancesAlphaResponse(rsp)
}

// QueryDecisionRequirementsAlphaWithBodyWithResponse request with arbitrary body returning *QueryDecisionRequirementsAlphaResponse
func (c *ClientWithResponses) QueryDecisionRequirementsAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error) {
	rsp, err := c.QueryDecisionRequirementsAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionRequirementsAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryDecisionRequirementsAlphaWithResponse(ctx context.Context, body QueryDecisionRequirementsAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryDecisionRequirementsAlphaResponse, error) {
	rsp, err := c.QueryDecisionRequirementsAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryDecisionRequirementsAlphaResponse(rsp)
}

// DeployResourcesWithResponse request returning *DeployResourcesResponse
func (c *ClientWithResponses) DeployResourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeployResourcesResponse, error) {
	rsp, err := c.DeployResources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployResourcesResponse(rsp)
}

// CreateDocumentLinkWithBodyWithResponse request with arbitrary body returning *CreateDocumentLinkResponse
func (c *ClientWithResponses) CreateDocumentLinkWithBodyWithResponse(ctx context.Context, documentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLinkWithBody(ctx, documentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

func (c *ClientWithResponses) CreateDocumentLinkWithResponse(ctx context.Context, documentId string, body CreateDocumentLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDocumentLinkResponse, error) {
	rsp, err := c.CreateDocumentLink(ctx, documentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDocumentLinkResponse(rsp)
}

// UploadDocumentWithResponse request returning *UploadDocumentResponse
func (c *ClientWithResponses) UploadDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadDocumentResponse, error) {
	rsp, err := c.UploadDocument(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadDocumentResponse(rsp)
}

// UploadMultipleDocumentsWithResponse request returning *UploadMultipleDocumentsResponse
func (c *ClientWithResponses) UploadMultipleDocumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UploadMultipleDocumentsResponse, error) {
	rsp, err := c.UploadMultipleDocuments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadMultipleDocumentsResponse(rsp)
}

// DeleteDocumentWithResponse request returning *DeleteDocumentResponse
func (c *ClientWithResponses) DeleteDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DeleteDocumentResponse, error) {
	rsp, err := c.DeleteDocument(ctx, documentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDocumentResponse(rsp)
}

// DownloadDocumentWithResponse request returning *DownloadDocumentResponse
func (c *ClientWithResponses) DownloadDocumentWithResponse(ctx context.Context, documentId string, reqEditors ...RequestEditorFn) (*DownloadDocumentResponse, error) {
	rsp, err := c.DownloadDocument(ctx, documentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadDocumentResponse(rsp)
}

// UpdateElementInstanceVariablesWithBodyWithResponse request with arbitrary body returning *UpdateElementInstanceVariablesResponse
func (c *ClientWithResponses) UpdateElementInstanceVariablesWithBodyWithResponse(ctx context.Context, elementInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error) {
	rsp, err := c.UpdateElementInstanceVariablesWithBody(ctx, elementInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElementInstanceVariablesResponse(rsp)
}

func (c *ClientWithResponses) UpdateElementInstanceVariablesWithResponse(ctx context.Context, elementInstanceKey string, body UpdateElementInstanceVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateElementInstanceVariablesResponse, error) {
	rsp, err := c.UpdateElementInstanceVariables(ctx, elementInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateElementInstanceVariablesResponse(rsp)
}

// QueryFlowNodeInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryFlowNodeInstancesAlphaResponse
func (c *ClientWithResponses) QueryFlowNodeInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error) {
	rsp, err := c.QueryFlowNodeInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFlowNodeInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryFlowNodeInstancesAlphaWithResponse(ctx context.Context, body QueryFlowNodeInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryFlowNodeInstancesAlphaResponse, error) {
	rsp, err := c.QueryFlowNodeInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFlowNodeInstancesAlphaResponse(rsp)
}

// QueryIncidentsWithBodyWithResponse request with arbitrary body returning *QueryIncidentsResponse
func (c *ClientWithResponses) QueryIncidentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error) {
	rsp, err := c.QueryIncidentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIncidentsResponse(rsp)
}

func (c *ClientWithResponses) QueryIncidentsWithResponse(ctx context.Context, body QueryIncidentsJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryIncidentsResponse, error) {
	rsp, err := c.QueryIncidents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryIncidentsResponse(rsp)
}

// GetIncidentByKeyWithResponse request returning *GetIncidentByKeyResponse
func (c *ClientWithResponses) GetIncidentByKeyWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*GetIncidentByKeyResponse, error) {
	rsp, err := c.GetIncidentByKey(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentByKeyResponse(rsp)
}

// ResolveIncidentWithResponse request returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithResponse(ctx context.Context, incidentKey string, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncident(ctx, incidentKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// ActivateJobsWithBodyWithResponse request with arbitrary body returning *ActivateJobsResponse
func (c *ClientWithResponses) ActivateJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error) {
	rsp, err := c.ActivateJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateJobsResponse(rsp)
}

func (c *ClientWithResponses) ActivateJobsWithResponse(ctx context.Context, body ActivateJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateJobsResponse, error) {
	rsp, err := c.ActivateJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateJobsResponse(rsp)
}

// UpdateAJobWithBodyWithResponse request with arbitrary body returning *UpdateAJobResponse
func (c *ClientWithResponses) UpdateAJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error) {
	rsp, err := c.UpdateAJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAJobResponse(rsp)
}

func (c *ClientWithResponses) UpdateAJobWithResponse(ctx context.Context, jobKey string, body UpdateAJobJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAJobResponse, error) {
	rsp, err := c.UpdateAJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAJobResponse(rsp)
}

// CompleteJobWithResponse request returning *CompleteJobResponse
func (c *ClientWithResponses) CompleteJobWithResponse(ctx context.Context, jobKey string, reqEditors ...RequestEditorFn) (*CompleteJobResponse, error) {
	rsp, err := c.CompleteJob(ctx, jobKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteJobResponse(rsp)
}

// ReportErrorForJobWithBodyWithResponse request with arbitrary body returning *ReportErrorForJobResponse
func (c *ClientWithResponses) ReportErrorForJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error) {
	rsp, err := c.ReportErrorForJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportErrorForJobResponse(rsp)
}

func (c *ClientWithResponses) ReportErrorForJobWithResponse(ctx context.Context, jobKey string, body ReportErrorForJobJSONRequestBody, reqEditors ...RequestEditorFn) (*ReportErrorForJobResponse, error) {
	rsp, err := c.ReportErrorForJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportErrorForJobResponse(rsp)
}

// FailJobWithBodyWithResponse request with arbitrary body returning *FailJobResponse
func (c *ClientWithResponses) FailJobWithBodyWithResponse(ctx context.Context, jobKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailJobResponse, error) {
	rsp, err := c.FailJobWithBody(ctx, jobKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailJobResponse(rsp)
}

func (c *ClientWithResponses) FailJobWithResponse(ctx context.Context, jobKey string, body FailJobJSONRequestBody, reqEditors ...RequestEditorFn) (*FailJobResponse, error) {
	rsp, err := c.FailJob(ctx, jobKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailJobResponse(rsp)
}

// GetStatusOfCamundaLicenseWithResponse request returning *GetStatusOfCamundaLicenseResponse
func (c *ClientWithResponses) GetStatusOfCamundaLicenseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusOfCamundaLicenseResponse, error) {
	rsp, err := c.GetStatusOfCamundaLicense(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusOfCamundaLicenseResponse(rsp)
}

// CorrelateAMessageWithBodyWithResponse request with arbitrary body returning *CorrelateAMessageResponse
func (c *ClientWithResponses) CorrelateAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error) {
	rsp, err := c.CorrelateAMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrelateAMessageResponse(rsp)
}

func (c *ClientWithResponses) CorrelateAMessageWithResponse(ctx context.Context, body CorrelateAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CorrelateAMessageResponse, error) {
	rsp, err := c.CorrelateAMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCorrelateAMessageResponse(rsp)
}

// PublishAMessageWithBodyWithResponse request with arbitrary body returning *PublishAMessageResponse
func (c *ClientWithResponses) PublishAMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error) {
	rsp, err := c.PublishAMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishAMessageResponse(rsp)
}

func (c *ClientWithResponses) PublishAMessageWithResponse(ctx context.Context, body PublishAMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PublishAMessageResponse, error) {
	rsp, err := c.PublishAMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishAMessageResponse(rsp)
}

// CreateProcessInstanceWithBodyWithResponse request with arbitrary body returning *CreateProcessInstanceResponse
func (c *ClientWithResponses) CreateProcessInstanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) CreateProcessInstanceWithResponse(ctx context.Context, body CreateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProcessInstanceResponse, error) {
	rsp, err := c.CreateProcessInstance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProcessInstanceResponse(rsp)
}

// QueryProcessInstancesAlphaWithBodyWithResponse request with arbitrary body returning *QueryProcessInstancesAlphaResponse
func (c *ClientWithResponses) QueryProcessInstancesAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error) {
	rsp, err := c.QueryProcessInstancesAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProcessInstancesAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryProcessInstancesAlphaWithResponse(ctx context.Context, body QueryProcessInstancesAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryProcessInstancesAlphaResponse, error) {
	rsp, err := c.QueryProcessInstancesAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryProcessInstancesAlphaResponse(rsp)
}

// CancelProcessInstanceWithBodyWithResponse request with arbitrary body returning *CancelProcessInstanceResponse
func (c *ClientWithResponses) CancelProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error) {
	rsp, err := c.CancelProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) CancelProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body CancelProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelProcessInstanceResponse, error) {
	rsp, err := c.CancelProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelProcessInstanceResponse(rsp)
}

// MigrateProcessInstanceWithBodyWithResponse request with arbitrary body returning *MigrateProcessInstanceResponse
func (c *ClientWithResponses) MigrateProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error) {
	rsp, err := c.MigrateProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) MigrateProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body MigrateProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateProcessInstanceResponse, error) {
	rsp, err := c.MigrateProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateProcessInstanceResponse(rsp)
}

// ModifyProcessInstanceWithBodyWithResponse request with arbitrary body returning *ModifyProcessInstanceResponse
func (c *ClientWithResponses) ModifyProcessInstanceWithBodyWithResponse(ctx context.Context, processInstanceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error) {
	rsp, err := c.ModifyProcessInstanceWithBody(ctx, processInstanceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProcessInstanceResponse(rsp)
}

func (c *ClientWithResponses) ModifyProcessInstanceWithResponse(ctx context.Context, processInstanceKey string, body ModifyProcessInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProcessInstanceResponse, error) {
	rsp, err := c.ModifyProcessInstance(ctx, processInstanceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProcessInstanceResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// GetResourceContentWithResponse request returning *GetResourceContentResponse
func (c *ClientWithResponses) GetResourceContentWithResponse(ctx context.Context, resourceKey string, reqEditors ...RequestEditorFn) (*GetResourceContentResponse, error) {
	rsp, err := c.GetResourceContent(ctx, resourceKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceContentResponse(rsp)
}

// DeleteResourceWithBodyWithResponse request with arbitrary body returning *DeleteResourceResponse
func (c *ClientWithResponses) DeleteResourceWithBodyWithResponse(ctx context.Context, resourceKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResourceWithBody(ctx, resourceKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

func (c *ClientWithResponses) DeleteResourceWithResponse(ctx context.Context, resourceKey string, body DeleteResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResource(ctx, resourceKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

// BroadcastSignalWithBodyWithResponse request with arbitrary body returning *BroadcastSignalResponse
func (c *ClientWithResponses) BroadcastSignalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error) {
	rsp, err := c.BroadcastSignalWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastSignalResponse(rsp)
}

func (c *ClientWithResponses) BroadcastSignalWithResponse(ctx context.Context, body BroadcastSignalJSONRequestBody, reqEditors ...RequestEditorFn) (*BroadcastSignalResponse, error) {
	rsp, err := c.BroadcastSignal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBroadcastSignalResponse(rsp)
}

// GetClusterTopologyWithResponse request returning *GetClusterTopologyResponse
func (c *ClientWithResponses) GetClusterTopologyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClusterTopologyResponse, error) {
	rsp, err := c.GetClusterTopology(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterTopologyResponse(rsp)
}

// QueryUserTasksAlphaWithBodyWithResponse request with arbitrary body returning *QueryUserTasksAlphaResponse
func (c *ClientWithResponses) QueryUserTasksAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error) {
	rsp, err := c.QueryUserTasksAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserTasksAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryUserTasksAlphaWithResponse(ctx context.Context, body QueryUserTasksAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserTasksAlphaResponse, error) {
	rsp, err := c.QueryUserTasksAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserTasksAlphaResponse(rsp)
}

// UpdateAUserTaskWithBodyWithResponse request with arbitrary body returning *UpdateAUserTaskResponse
func (c *ClientWithResponses) UpdateAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error) {
	rsp, err := c.UpdateAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateAUserTaskWithResponse(ctx context.Context, userTaskKey string, body UpdateAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAUserTaskResponse, error) {
	rsp, err := c.UpdateAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAUserTaskResponse(rsp)
}

// UnassignAUserTaskWithResponse request returning *UnassignAUserTaskResponse
func (c *ClientWithResponses) UnassignAUserTaskWithResponse(ctx context.Context, userTaskKey string, reqEditors ...RequestEditorFn) (*UnassignAUserTaskResponse, error) {
	rsp, err := c.UnassignAUserTask(ctx, userTaskKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnassignAUserTaskResponse(rsp)
}

// AssignAUserTaskWithBodyWithResponse request with arbitrary body returning *AssignAUserTaskResponse
func (c *ClientWithResponses) AssignAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error) {
	rsp, err := c.AssignAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) AssignAUserTaskWithResponse(ctx context.Context, userTaskKey string, body AssignAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignAUserTaskResponse, error) {
	rsp, err := c.AssignAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignAUserTaskResponse(rsp)
}

// CompleteAUserTaskWithBodyWithResponse request with arbitrary body returning *CompleteAUserTaskResponse
func (c *ClientWithResponses) CompleteAUserTaskWithBodyWithResponse(ctx context.Context, userTaskKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error) {
	rsp, err := c.CompleteAUserTaskWithBody(ctx, userTaskKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteAUserTaskResponse(rsp)
}

func (c *ClientWithResponses) CompleteAUserTaskWithResponse(ctx context.Context, userTaskKey string, body CompleteAUserTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteAUserTaskResponse, error) {
	rsp, err := c.CompleteAUserTask(ctx, userTaskKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteAUserTaskResponse(rsp)
}

// QueryUsersAlphaWithBodyWithResponse request with arbitrary body returning *QueryUsersAlphaResponse
func (c *ClientWithResponses) QueryUsersAlphaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error) {
	rsp, err := c.QueryUsersAlphaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsersAlphaResponse(rsp)
}

func (c *ClientWithResponses) QueryUsersAlphaWithResponse(ctx context.Context, body QueryUsersAlphaJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUsersAlphaResponse, error) {
	rsp, err := c.QueryUsersAlpha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUsersAlphaResponse(rsp)
}

// ParsePinInternalClockAlphaResponse parses an HTTP response from a PinInternalClockAlphaWithResponse call
func ParsePinInternalClockAlphaResponse(rsp *http.Response) (*PinInternalClockAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PinInternalClockAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetInternalClockAlphaResponse parses an HTTP response from a ResetInternalClockAlphaWithResponse call
func ParseResetInternalClockAlphaResponse(rsp *http.Response) (*ResetInternalClockAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetInternalClockAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEvaluateDecisionResponse parses an HTTP response from a EvaluateDecisionWithResponse call
func ParseEvaluateDecisionResponse(rsp *http.Response) (*EvaluateDecisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EvaluateDecisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionDefinitionsAlphaResponse parses an HTTP response from a QueryDecisionDefinitionsAlphaWithResponse call
func ParseQueryDecisionDefinitionsAlphaResponse(rsp *http.Response) (*QueryDecisionDefinitionsAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionDefinitionsAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDecisionDefinitionXmlAlphaResponse parses an HTTP response from a GetDecisionDefinitionXmlAlphaWithResponse call
func ParseGetDecisionDefinitionXmlAlphaResponse(rsp *http.Response) (*GetDecisionDefinitionXmlAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDecisionDefinitionXmlAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionInstancesAlphaResponse parses an HTTP response from a QueryDecisionInstancesAlphaWithResponse call
func ParseQueryDecisionInstancesAlphaResponse(rsp *http.Response) (*QueryDecisionInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryDecisionRequirementsAlphaResponse parses an HTTP response from a QueryDecisionRequirementsAlphaWithResponse call
func ParseQueryDecisionRequirementsAlphaResponse(rsp *http.Response) (*QueryDecisionRequirementsAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryDecisionRequirementsAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeployResourcesResponse parses an HTTP response from a DeployResourcesWithResponse call
func ParseDeployResourcesResponse(rsp *http.Response) (*DeployResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeployResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDocumentLinkResponse parses an HTTP response from a CreateDocumentLinkWithResponse call
func ParseCreateDocumentLinkResponse(rsp *http.Response) (*CreateDocumentLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDocumentLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadDocumentResponse parses an HTTP response from a UploadDocumentWithResponse call
func ParseUploadDocumentResponse(rsp *http.Response) (*UploadDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUploadMultipleDocumentsResponse parses an HTTP response from a UploadMultipleDocumentsWithResponse call
func ParseUploadMultipleDocumentsResponse(rsp *http.Response) (*UploadMultipleDocumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadMultipleDocumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteDocumentResponse parses an HTTP response from a DeleteDocumentWithResponse call
func ParseDeleteDocumentResponse(rsp *http.Response) (*DeleteDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDownloadDocumentResponse parses an HTTP response from a DownloadDocumentWithResponse call
func ParseDownloadDocumentResponse(rsp *http.Response) (*DownloadDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateElementInstanceVariablesResponse parses an HTTP response from a UpdateElementInstanceVariablesWithResponse call
func ParseUpdateElementInstanceVariablesResponse(rsp *http.Response) (*UpdateElementInstanceVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateElementInstanceVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryFlowNodeInstancesAlphaResponse parses an HTTP response from a QueryFlowNodeInstancesAlphaWithResponse call
func ParseQueryFlowNodeInstancesAlphaResponse(rsp *http.Response) (*QueryFlowNodeInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryFlowNodeInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryIncidentsResponse parses an HTTP response from a QueryIncidentsWithResponse call
func ParseQueryIncidentsResponse(rsp *http.Response) (*QueryIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentByKeyResponse parses an HTTP response from a GetIncidentByKeyWithResponse call
func ParseGetIncidentByKeyResponse(rsp *http.Response) (*GetIncidentByKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentByKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseActivateJobsResponse parses an HTTP response from a ActivateJobsWithResponse call
func ParseActivateJobsResponse(rsp *http.Response) (*ActivateJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAJobResponse parses an HTTP response from a UpdateAJobWithResponse call
func ParseUpdateAJobResponse(rsp *http.Response) (*UpdateAJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCompleteJobResponse parses an HTTP response from a CompleteJobWithResponse call
func ParseCompleteJobResponse(rsp *http.Response) (*CompleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReportErrorForJobResponse parses an HTTP response from a ReportErrorForJobWithResponse call
func ParseReportErrorForJobResponse(rsp *http.Response) (*ReportErrorForJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportErrorForJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFailJobResponse parses an HTTP response from a FailJobWithResponse call
func ParseFailJobResponse(rsp *http.Response) (*FailJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FailJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusOfCamundaLicenseResponse parses an HTTP response from a GetStatusOfCamundaLicenseWithResponse call
func ParseGetStatusOfCamundaLicenseResponse(rsp *http.Response) (*GetStatusOfCamundaLicenseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusOfCamundaLicenseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCorrelateAMessageResponse parses an HTTP response from a CorrelateAMessageWithResponse call
func ParseCorrelateAMessageResponse(rsp *http.Response) (*CorrelateAMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CorrelateAMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishAMessageResponse parses an HTTP response from a PublishAMessageWithResponse call
func ParsePublishAMessageResponse(rsp *http.Response) (*PublishAMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishAMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateProcessInstanceResponse parses an HTTP response from a CreateProcessInstanceWithResponse call
func ParseCreateProcessInstanceResponse(rsp *http.Response) (*CreateProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryProcessInstancesAlphaResponse parses an HTTP response from a QueryProcessInstancesAlphaWithResponse call
func ParseQueryProcessInstancesAlphaResponse(rsp *http.Response) (*QueryProcessInstancesAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryProcessInstancesAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCancelProcessInstanceResponse parses an HTTP response from a CancelProcessInstanceWithResponse call
func ParseCancelProcessInstanceResponse(rsp *http.Response) (*CancelProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseMigrateProcessInstanceResponse parses an HTTP response from a MigrateProcessInstanceWithResponse call
func ParseMigrateProcessInstanceResponse(rsp *http.Response) (*MigrateProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrateProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseModifyProcessInstanceResponse parses an HTTP response from a ModifyProcessInstanceWithResponse call
func ParseModifyProcessInstanceResponse(rsp *http.Response) (*ModifyProcessInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyProcessInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceContentResponse parses an HTTP response from a GetResourceContentWithResponse call
func ParseGetResourceContentResponse(rsp *http.Response) (*GetResourceContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteResourceResponse parses an HTTP response from a DeleteResourceWithResponse call
func ParseDeleteResourceResponse(rsp *http.Response) (*DeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBroadcastSignalResponse parses an HTTP response from a BroadcastSignalWithResponse call
func ParseBroadcastSignalResponse(rsp *http.Response) (*BroadcastSignalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BroadcastSignalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClusterTopologyResponse parses an HTTP response from a GetClusterTopologyWithResponse call
func ParseGetClusterTopologyResponse(rsp *http.Response) (*GetClusterTopologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterTopologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Topology
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUserTasksAlphaResponse parses an HTTP response from a QueryUserTasksAlphaWithResponse call
func ParseQueryUserTasksAlphaResponse(rsp *http.Response) (*QueryUserTasksAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUserTasksAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateAUserTaskResponse parses an HTTP response from a UpdateAUserTaskWithResponse call
func ParseUpdateAUserTaskResponse(rsp *http.Response) (*UpdateAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnassignAUserTaskResponse parses an HTTP response from a UnassignAUserTaskWithResponse call
func ParseUnassignAUserTaskResponse(rsp *http.Response) (*UnassignAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnassignAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAssignAUserTaskResponse parses an HTTP response from a AssignAUserTaskWithResponse call
func ParseAssignAUserTaskResponse(rsp *http.Response) (*AssignAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCompleteAUserTaskResponse parses an HTTP response from a CompleteAUserTaskWithResponse call
func ParseCompleteAUserTaskResponse(rsp *http.Response) (*CompleteAUserTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteAUserTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseQueryUsersAlphaResponse parses an HTTP response from a QueryUsersAlphaWithResponse call
func ParseQueryUsersAlphaResponse(rsp *http.Response) (*QueryUsersAlphaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUsersAlphaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"goK8e8yJBylLyffKFjZl311uyKN7phanxQdN11IsaZukLZbaHydzSzGFxvEFTLUwjSoJWaq0V8u3VKG5",
	"Wplh/8U76X/de/q3i/1/G33zdPTs2eBvT7/9KegHrgRZV/N+43lELbZ7jaG3Jt9MY7EfInFSHWgfYowC",
	"+M336r370ExPX9mY3Xr5CPl2SpTenj8MrVRa7xtO2I3JE2zra/HenZZT3bBKzduu2HTSYc39j8b1OkA3",
	"MUzqIzJir9UzhtmIDYzY5vDTH+x+N7d07NnQnRPlNfd1PXuGa2MnN4RzGhXvPZS43Ckzz3YcszZih8cm",
	"XNL6iKncupLIWsTdNjvXh0Vcm/dKbK1D2JaPg6ZOqrCuiNrdu7sdOn6cfBOe5a5Hpq1dL5+I14VG1dEb",
	"Xhi11rT58q3nE0kwjbs9TQvK02MawZtu58Dc1uWHsMv8Uz1cZFb1+NkkSmh8fjPn822UR7uNUqXUKkMO",
	"DAmQMOdUrgBYM4I54eNcLoNRmsexpjJ+Y+V5zhVN392FOhPZOKPPsSCveHx/r++c6/7vLLUfxCy8Du77",
	"zgfth3c+HdqQgjJiwFtcRPv4Ct1whEoFk9278rHxbrxT5nlX1Skt0vs7375nM/dfm4rN+WTzqTifGiFM",
	"Tllx9O58M+edzhfYwtr/Wsbev73/fwEAAP//7ibE1PvOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
