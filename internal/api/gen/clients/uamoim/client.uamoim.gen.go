// Package uamoimapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package uamoim

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// Group defines model for Group.
type Group struct {
	// Bestellbar Orderable flag (string as per SQL result)
	Bestellbar  *string `json:"Bestellbar,omitempty"`
	DisplayName string  `json:"DisplayName"`
	Modul       *string `json:"Modul,omitempty"`
	Type        *string `json:"Type,omitempty"`
	UIDGroup    string  `json:"UID_Group"`
	UIDSystem   string  `json:"UID_System"`
}

// ModulData defines model for ModulData.
type ModulData struct {
	Description *string `json:"Description,omitempty"`

	// EntraShortName Required when system is an EntraID platform
	EntraShortName *string `json:"Entra_ShortName,omitempty"`
	ModulName      string  `json:"ModulName"`
}

// ModulResponse defines model for ModulResponse.
type ModulResponse struct {
	CanonicalName *string `json:"CanonicalName,omitempty"`
	Description   *string `json:"Description,omitempty"`
	EntraPrefix   *string `json:"EntraPrefix,omitempty"`
	Message       *string `json:"Message,omitempty"`
	ModulName     *string `json:"ModulName,omitempty"`
	Success       *bool   `json:"Success,omitempty"`
	UIDModul      *string `json:"UID_Modul,omitempty"`
	UIDSystem     *string `json:"UID_System,omitempty"`
}

// ModuleDetail defines model for ModuleDetail.
type ModuleDetail struct {
	Description       *string `json:"Description,omitempty"`
	DistinguishedName *string `json:"DistinguishedName,omitempty"`
	EntraPrefix       *string `json:"EntraPrefix,omitempty"`
	UIDModul          string  `json:"UID_Modul"`
	UIDSystem         string  `json:"UID_System"`

	// Cn Module common name
	Cn string `json:"cn"`
}

// ModuleSummary defines model for ModuleSummary.
type ModuleSummary struct {
	CanonicalName string  `json:"CanonicalName"`
	Description   *string `json:"Description,omitempty"`
	EntraPrefix   *string `json:"EntraPrefix,omitempty"`
	UIDModul      string  `json:"UID_Modul"`
	UIDSystem     string  `json:"UID_System"`
}

// SystemDetail defines model for SystemDetail.
type SystemDetail struct {
	ADS                *bool   `json:"ADS,omitempty"`
	ADSPrefix          *string `json:"ADSPrefix,omitempty"`
	APIPermissions     *string `json:"APIPermissions,omitempty"`
	AppType            *string `json:"AppType,omitempty"`
	CI                 *string `json:"CI,omitempty"`
	DisplayName        *string `json:"DisplayName,omitempty"`
	EntraAD            *bool   `json:"EntraAD,omitempty"`
	EntraPrefix        *string `json:"EntraPrefix,omitempty"`
	EnvironmentDisplay *string `json:"EnvironmentDisplay,omitempty"`
	EnvironmentType    *int    `json:"EnvironmentType,omitempty"`
	Interface          *string `json:"Interface,omitempty"`
	LeanixID           *string `json:"LeanixID,omitempty"`
	Modulfilter        *string `json:"Modulfilter,omitempty"`
	Status             *string `json:"Status,omitempty"`
}

// SystemSummary defines model for SystemSummary.
type SystemSummary struct {
	CI                 *string `json:"CI,omitempty"`
	DisplayName        string  `json:"DisplayName"`
	EnvironmentDisplay *string `json:"EnvironmentDisplay,omitempty"`
	EnvironmentType    *int    `json:"EnvironmentType,omitempty"`
	LeanixID           *string `json:"LeanixID,omitempty"`
	UIDSystem          string  `json:"UID_System"`
}

// CreateModuleJSONRequestBody defines body for CreateModule for application/json ContentType.
type CreateModuleJSONRequestBody = ModulData

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSystem request
	GetSystem(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroupsBySystem request
	ListGroupsBySystem(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListModulesBySystem request
	ListModulesBySystem(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateModuleWithBody request with any body
	CreateModuleWithBody(ctx context.Context, uidUnsrootB string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateModule(ctx context.Context, uidUnsrootB string, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetModule request
	GetModule(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroupsByModule request
	ListGroupsByModule(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSystems request
	ListSystems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSystem(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemRequest(c.Server, uidUnsrootB)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroupsBySystem(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupsBySystemRequest(c.Server, uidUnsrootB)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListModulesBySystem(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListModulesBySystemRequest(c.Server, uidUnsrootB)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModuleWithBody(ctx context.Context, uidUnsrootB string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleRequestWithBody(c.Server, uidUnsrootB, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateModule(ctx context.Context, uidUnsrootB string, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateModuleRequest(c.Server, uidUnsrootB, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetModule(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetModuleRequest(c.Server, uidUnsrootB, uidunsContainerB)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroupsByModule(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupsByModuleRequest(c.Server, uidUnsrootB, uidunsContainerB)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSystems(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSystemsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSystemRequest generates requests for GetSystem
func NewGetSystemRequest(server string, uidUnsrootB string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "UID_UnsrootB", runtime.ParamLocationPath, uidUnsrootB)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/System/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGroupsBySystemRequest generates requests for ListGroupsBySystem
func NewListGroupsBySystemRequest(server string, uidUnsrootB string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "UID_UnsrootB", runtime.ParamLocationPath, uidUnsrootB)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/System/%s/Group", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListModulesBySystemRequest generates requests for ListModulesBySystem
func NewListModulesBySystemRequest(server string, uidUnsrootB string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "UID_UnsrootB", runtime.ParamLocationPath, uidUnsrootB)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/System/%s/Modul", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateModuleRequest calls the generic CreateModule builder with application/json body
func NewCreateModuleRequest(server string, uidUnsrootB string, body CreateModuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateModuleRequestWithBody(server, uidUnsrootB, "application/json", bodyReader)
}

// NewCreateModuleRequestWithBody generates requests for CreateModule with any type of body
func NewCreateModuleRequestWithBody(server string, uidUnsrootB string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "UID_UnsrootB", runtime.ParamLocationPath, uidUnsrootB)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/System/%s/Modul", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetModuleRequest generates requests for GetModule
func NewGetModuleRequest(server string, uidUnsrootB string, uidunsContainerB string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "UID_UnsrootB", runtime.ParamLocationPath, uidUnsrootB)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "UID_UNSContainerB", runtime.ParamLocationPath, uidunsContainerB)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/System/%s/Modul/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGroupsByModuleRequest generates requests for ListGroupsByModule
func NewListGroupsByModuleRequest(server string, uidUnsrootB string, uidunsContainerB string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "UID_UnsrootB", runtime.ParamLocationPath, uidUnsrootB)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "UID_UNSContainerB", runtime.ParamLocationPath, uidunsContainerB)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/System/%s/Modul/%s/Group", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSystemsRequest generates requests for ListSystems
func NewListSystemsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Systems")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSystemWithResponse request
	GetSystemWithResponse(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error)

	// ListGroupsBySystemWithResponse request
	ListGroupsBySystemWithResponse(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*ListGroupsBySystemResponse, error)

	// ListModulesBySystemWithResponse request
	ListModulesBySystemWithResponse(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*ListModulesBySystemResponse, error)

	// CreateModuleWithBodyWithResponse request with any body
	CreateModuleWithBodyWithResponse(ctx context.Context, uidUnsrootB string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error)

	CreateModuleWithResponse(ctx context.Context, uidUnsrootB string, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error)

	// GetModuleWithResponse request
	GetModuleWithResponse(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*GetModuleResponse, error)

	// ListGroupsByModuleWithResponse request
	ListGroupsByModuleWithResponse(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*ListGroupsByModuleResponse, error)

	// ListSystemsWithResponse request
	ListSystemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSystemsResponse, error)
}

type GetSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemDetail
}

// Status returns HTTPResponse.Status
func (r GetSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupsBySystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r ListGroupsBySystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupsBySystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListModulesBySystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ModuleSummary
}

// Status returns HTTPResponse.Status
func (r ListModulesBySystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListModulesBySystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateModuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModulResponse
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r CreateModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetModuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModuleDetail
}

// Status returns HTTPResponse.Status
func (r GetModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupsByModuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r ListGroupsByModuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupsByModuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSystemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SystemSummary
}

// Status returns HTTPResponse.Status
func (r ListSystemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSystemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSystemWithResponse request returning *GetSystemResponse
func (c *ClientWithResponses) GetSystemWithResponse(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*GetSystemResponse, error) {
	rsp, err := c.GetSystem(ctx, uidUnsrootB, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemResponse(rsp)
}

// ListGroupsBySystemWithResponse request returning *ListGroupsBySystemResponse
func (c *ClientWithResponses) ListGroupsBySystemWithResponse(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*ListGroupsBySystemResponse, error) {
	rsp, err := c.ListGroupsBySystem(ctx, uidUnsrootB, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupsBySystemResponse(rsp)
}

// ListModulesBySystemWithResponse request returning *ListModulesBySystemResponse
func (c *ClientWithResponses) ListModulesBySystemWithResponse(ctx context.Context, uidUnsrootB string, reqEditors ...RequestEditorFn) (*ListModulesBySystemResponse, error) {
	rsp, err := c.ListModulesBySystem(ctx, uidUnsrootB, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListModulesBySystemResponse(rsp)
}

// CreateModuleWithBodyWithResponse request with arbitrary body returning *CreateModuleResponse
func (c *ClientWithResponses) CreateModuleWithBodyWithResponse(ctx context.Context, uidUnsrootB string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error) {
	rsp, err := c.CreateModuleWithBody(ctx, uidUnsrootB, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleResponse(rsp)
}

func (c *ClientWithResponses) CreateModuleWithResponse(ctx context.Context, uidUnsrootB string, body CreateModuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateModuleResponse, error) {
	rsp, err := c.CreateModule(ctx, uidUnsrootB, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateModuleResponse(rsp)
}

// GetModuleWithResponse request returning *GetModuleResponse
func (c *ClientWithResponses) GetModuleWithResponse(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*GetModuleResponse, error) {
	rsp, err := c.GetModule(ctx, uidUnsrootB, uidunsContainerB, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetModuleResponse(rsp)
}

// ListGroupsByModuleWithResponse request returning *ListGroupsByModuleResponse
func (c *ClientWithResponses) ListGroupsByModuleWithResponse(ctx context.Context, uidUnsrootB string, uidunsContainerB string, reqEditors ...RequestEditorFn) (*ListGroupsByModuleResponse, error) {
	rsp, err := c.ListGroupsByModule(ctx, uidUnsrootB, uidunsContainerB, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupsByModuleResponse(rsp)
}

// ListSystemsWithResponse request returning *ListSystemsResponse
func (c *ClientWithResponses) ListSystemsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSystemsResponse, error) {
	rsp, err := c.ListSystems(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSystemsResponse(rsp)
}

// ParseGetSystemResponse parses an HTTP response from a GetSystemWithResponse call
func ParseGetSystemResponse(rsp *http.Response) (*GetSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListGroupsBySystemResponse parses an HTTP response from a ListGroupsBySystemWithResponse call
func ParseListGroupsBySystemResponse(rsp *http.Response) (*ListGroupsBySystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupsBySystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListModulesBySystemResponse parses an HTTP response from a ListModulesBySystemWithResponse call
func ParseListModulesBySystemResponse(rsp *http.Response) (*ListModulesBySystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListModulesBySystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ModuleSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateModuleResponse parses an HTTP response from a CreateModuleWithResponse call
func ParseCreateModuleResponse(rsp *http.Response) (*CreateModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModulResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetModuleResponse parses an HTTP response from a GetModuleWithResponse call
func ParseGetModuleResponse(rsp *http.Response) (*GetModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModuleDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListGroupsByModuleResponse parses an HTTP response from a ListGroupsByModuleWithResponse call
func ParseListGroupsByModuleResponse(rsp *http.Response) (*ListGroupsByModuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupsByModuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSystemsResponse parses an HTTP response from a ListSystemsWithResponse call
func ParseListSystemsResponse(rsp *http.Response) (*ListSystemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSystemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SystemSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY327btht9lQ/s7yIFBNv9tbvxnRNnhbGkS+PlqgtaWvpks5VIlh+VRgsM7B32hnuS",
	"gaT8n3KSNukCrFdxSIo83zmH1KFuWKpKrSRKS6x/wyidYcn9z2NjlHE/tFEajRXom3HRbGuNrM/IGiGn",
	"bD5PFi1q8hFTy+YJe21UpXenOESyWBQT7ufJkFIjtBVKsj771WRo+KRAyAs+hYMwPXACjQbGb0/AIFWF",
	"fc6SbQQJGwrSBa/f8BIjCBN2qrKqiPb85hsiHRej4ftlGdHecU0WyzgjBj9XwmDG+u/WZtp4bhP1ZYRF",
	"j3rILd9lcrjOXQTfsbSGvx/PlLELUjbpPm8AwpcZSiAPCQQBl+CfHQ1BF9zmypQxwj20Frq3yl8Nba3x",
	"HEkrSbhb5xGXSoqUF63S3omJM4O5uI5bA4n4dI9tWlceV2mKRGt9E6UK5HJhkHbX3WafOE04RMtFcX83",
	"DAVZIaeVoBlmrfXcxtQ3lJSwVO56MBQFqSpLJUE6XMkd9tJy/6wA+flb7YXjqiy5qf8Ne32bD+5U+mYR",
	"MRbCY23uGQzHcQ8PhuM9lQ3ORmdoSkEklKT4EK1bz9ejUZtV957knu/BMA74NjGO5ZUwSpYobbPObcO2",
	"4AtpcYrGDRpJiybnaRzmCXIprkfD9mMlF4VFEz9YLLcV3fFkCNq2O/xraX44pvZy8dU7YP/Lc54wwrQy",
	"wtZjl2wCGalSnwQOKjuL5A+Jo1Mg9HaGMBIO3KEEJa8hE3mOBoSEWlUGcFW4CyTCzRCeYQnzJ1mfcbfO",
	"EhnX4hes2dxBEzJXEQQa5eBsBBkacYUZ5EaVYGcI2qgrkWEGR89gNNDiLPxv4ODD28PTzpELciTcLAMt",
	"OgOtT6fl1C5/fHjegWOZaSWkJcBrrQgh8EgJhBOSEuAyAx9TCCY8/YQZTGqfu8hyi65S8mMaojxw6vwu",
	"XYnCFhg4hFGG0gpbwymXfIoG/v7zLxho3fzv5gFX5UFakVUlbKJf1Gocq1doKFDzotPr9JxdlEbJtWB9",
	"9rLT67xkCdPczry43VBS98bZ5EKSUcoezl3PFK3747YFd+uMMtZnr9EuvaS54SVaNMT677ZluZDic4XL",
	"iOTLy4Vjf+XHpQccmpUD1pGwdS9bU2HSZO6Y7y/d4JCJfG3/7/WCf6VF6YvhWhci9eV0P1J4Oa3m+5/B",
	"nPXZs+4q5HebhN/deBl4O27WG/oh8wPIkf6q92LXrRfS+VsZ8QdmbtBPAeLWXGiu0EC4OvhNuTinHP/A",
	"F6xOargYDZ2T+NRp0IAgdukeiivbXabzqL4ngmyw82H9bUI/MW2FJ+YWkQM3q/cFN4bXMbUHrgNUDlPP",
	"1aPJ7eRo1oBKusNrIf6a6kGvvaIvs1Sr6M2B9l9UfTPt3kf9MpD2uPI3i7j1IuI3urHLecK0ooi6Rwa5",
	"xTDuKcn6uUKyhyqrH+yMXt3855shyOGZP+LLYfM6HnGM18AlJFXZVJV4Z8e86r18MJTHjcN20P2szERk",
	"GUo4EJKqPBepcIHDiOnM0vOvcW4wHXCQ+KVxsEuBew18y/HVNL4ZHylpuZBo9ueUJ+X4pGXdBTV3WXe9",
	"8ieTizY+sUS81Xyt+E65SGMqcpE2tD6Uy+6RmX6Y7kdg2w5sO2aMBDba667FmO9B6eaXkftQSw3KR+W2",
	"WQSuBIlJgWCVv+ynlTHulVWRd3PkQrT2bcPvyPWvGu8unV3JLx3br+eoC54ifBF2Fr5kbN2/J5wQLs5P",
	"WMIqU7A+m1mrqd/t4jUvdYGdVJVddwN36zTgbhb7bLzkbdl0ugyWy6bGNPPL+T8BAAD//xe9UwaFGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
