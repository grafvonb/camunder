// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oauth2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for OAuth2ErrorError.
const (
	InvalidClient        OAuth2ErrorError = "invalid_client"
	InvalidGrant         OAuth2ErrorError = "invalid_grant"
	InvalidRequest       OAuth2ErrorError = "invalid_request"
	InvalidScope         OAuth2ErrorError = "invalid_scope"
	UnauthorizedClient   OAuth2ErrorError = "unauthorized_client"
	UnsupportedGrantType OAuth2ErrorError = "unsupported_grant_type"
)

// Defines values for RequestTokenFormdataBody0GrantType.
const (
	ClientCredentials RequestTokenFormdataBody0GrantType = "client_credentials"
)

// Defines values for RequestTokenFormdataBody1GrantType.
const (
	AuthorizationCode RequestTokenFormdataBody1GrantType = "authorization_code"
)

// OAuth2Error RFC 6749 Section 5.2 error response
type OAuth2Error struct {
	// Error Error code
	Error OAuth2ErrorError `json:"error"`

	// ErrorDescription Human-readable ASCII text providing additional information
	ErrorDescription *string `json:"error_description,omitempty"`

	// ErrorUri URI identifying a human-readable web page with information about the error
	ErrorUri *string `json:"error_uri,omitempty"`
}

// OAuth2ErrorError Error code
type OAuth2ErrorError string

// RequestTokenFormdataBody defines parameters for RequestToken.
type RequestTokenFormdataBody struct {
	union json.RawMessage
}

// RequestTokenFormdataBody0 defines parameters for RequestToken.
type RequestTokenFormdataBody0 struct {
	// ClientId OAuth client ID
	ClientId string `json:"client_id"`

	// ClientSecret OAuth client secret
	ClientSecret string `json:"client_secret"`

	// GrantType OAuth 2.0 grant type
	GrantType RequestTokenFormdataBody0GrantType `json:"grant_type"`

	// Scope Optional space-separated list of scopes
	Scope *string `json:"scope,omitempty"`
}

// RequestTokenFormdataBody0GrantType defines parameters for RequestToken.
type RequestTokenFormdataBody0GrantType string

// RequestTokenFormdataBody1 defines parameters for RequestToken.
type RequestTokenFormdataBody1 struct {
	// ClientId OAuth client ID (required for public and confidential clients)
	ClientId string `json:"client_id"`

	// ClientSecret OAuth client secret (often required for confidential clients)
	ClientSecret *string `json:"client_secret,omitempty"`

	// Code Authorization code from the /authorize step
	Code string `json:"code"`

	// GrantType OAuth 2.0 grant type
	GrantType RequestTokenFormdataBody1GrantType `json:"grant_type"`

	// RedirectUri Redirect URI used during authorization
	RedirectUri string `json:"redirect_uri"`
}

// RequestTokenFormdataBody1GrantType defines parameters for RequestToken.
type RequestTokenFormdataBody1GrantType string

// RequestTokenFormdataRequestBody defines body for RequestToken for application/x-www-form-urlencoded ContentType.
type RequestTokenFormdataRequestBody RequestTokenFormdataBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RequestTokenWithBody request with any body
	RequestTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestTokenWithFormdataBody(ctx context.Context, body RequestTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RequestTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestTokenWithFormdataBody(ctx context.Context, body RequestTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestTokenRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRequestTokenRequestWithFormdataBody calls the generic RequestToken builder with application/x-www-form-urlencoded body
func NewRequestTokenRequestWithFormdataBody(server string, body RequestTokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewRequestTokenRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewRequestTokenRequestWithBody generates requests for RequestToken with any type of body
func NewRequestTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RequestTokenWithBodyWithResponse request with any body
	RequestTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestTokenResponse, error)

	RequestTokenWithFormdataBodyWithResponse(ctx context.Context, body RequestTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*RequestTokenResponse, error)
}

type RequestTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AccessToken Access token (often a JWT)
		AccessToken string `json:"access_token"`

		// ExpiresIn Time until expiration in seconds
		ExpiresIn int `json:"expires_in"`

		// IdToken ID token (returned if `openid` scope was requested)
		IdToken *string `json:"id_token,omitempty"`

		// RefreshToken Refresh token (optional)
		RefreshToken *string `json:"refresh_token,omitempty"`

		// Scope Granted scopes
		Scope *string `json:"scope,omitempty"`

		// TokenType Token type, usually "Bearer"
		TokenType string `json:"token_type"`
	}
	JSON400 *OAuth2Error
	JSON401 *OAuth2Error
	JSON403 *OAuth2Error
}

// Status returns HTTPResponse.Status
func (r RequestTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RequestTokenWithBodyWithResponse request with arbitrary body returning *RequestTokenResponse
func (c *ClientWithResponses) RequestTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestTokenResponse, error) {
	rsp, err := c.RequestTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestTokenResponse(rsp)
}

func (c *ClientWithResponses) RequestTokenWithFormdataBodyWithResponse(ctx context.Context, body RequestTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*RequestTokenResponse, error) {
	rsp, err := c.RequestTokenWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestTokenResponse(rsp)
}

// ParseRequestTokenResponse parses an HTTP response from a RequestTokenWithResponse call
func ParseRequestTokenResponse(rsp *http.Response) (*RequestTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AccessToken Access token (often a JWT)
			AccessToken string `json:"access_token"`

			// ExpiresIn Time until expiration in seconds
			ExpiresIn int `json:"expires_in"`

			// IdToken ID token (returned if `openid` scope was requested)
			IdToken *string `json:"id_token,omitempty"`

			// RefreshToken Refresh token (optional)
			RefreshToken *string `json:"refresh_token,omitempty"`

			// Scope Granted scopes
			Scope *string `json:"scope,omitempty"`

			// TokenType Token type, usually "Bearer"
			TokenType string `json:"token_type"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest OAuth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest OAuth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest OAuth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vwEAAP//tcajgrQSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
