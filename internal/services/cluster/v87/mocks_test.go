// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package v87

import (
	"context"

	"github.com/grafvonb/camunder/internal/api/gen/clients/camunda/camunda/v87"
	"github.com/grafvonb/camunder/pkg/camunda/cluster"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGenClusterClient creates a new instance of MockGenClusterClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenClusterClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenClusterClient {
	mock := &MockGenClusterClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenClusterClient is an autogenerated mock type for the GenClusterClient type
type MockGenClusterClient struct {
	mock.Mock
}

type MockGenClusterClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenClusterClient) EXPECT() *MockGenClusterClient_Expecter {
	return &MockGenClusterClient_Expecter{mock: &_m.Mock}
}

// GetClusterTopologyWithResponse provides a mock function for the type MockGenClusterClient
func (_mock *MockGenClusterClient) GetClusterTopologyWithResponse(ctx context.Context, reqEditors ...v87.RequestEditorFn) (*v87.GetClusterTopologyResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetClusterTopologyWithResponse")
	}

	var r0 *v87.GetClusterTopologyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...v87.RequestEditorFn) (*v87.GetClusterTopologyResponse, error)); ok {
		return returnFunc(ctx, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...v87.RequestEditorFn) *v87.GetClusterTopologyResponse); ok {
		r0 = returnFunc(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v87.GetClusterTopologyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...v87.RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenClusterClient_GetClusterTopologyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterTopologyWithResponse'
type MockGenClusterClient_GetClusterTopologyWithResponse_Call struct {
	*mock.Call
}

// GetClusterTopologyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v87.RequestEditorFn
func (_e *MockGenClusterClient_Expecter) GetClusterTopologyWithResponse(ctx interface{}, reqEditors ...interface{}) *MockGenClusterClient_GetClusterTopologyWithResponse_Call {
	return &MockGenClusterClient_GetClusterTopologyWithResponse_Call{Call: _e.mock.On("GetClusterTopologyWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *MockGenClusterClient_GetClusterTopologyWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v87.RequestEditorFn)) *MockGenClusterClient_GetClusterTopologyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []v87.RequestEditorFn
		var variadicArgs []v87.RequestEditorFn
		if len(args) > 1 {
			variadicArgs = args[1].([]v87.RequestEditorFn)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockGenClusterClient_GetClusterTopologyWithResponse_Call) Return(getClusterTopologyResponse *v87.GetClusterTopologyResponse, err error) *MockGenClusterClient_GetClusterTopologyWithResponse_Call {
	_c.Call.Return(getClusterTopologyResponse, err)
	return _c
}

func (_c *MockGenClusterClient_GetClusterTopologyWithResponse_Call) RunAndReturn(run func(ctx context.Context, reqEditors ...v87.RequestEditorFn) (*v87.GetClusterTopologyResponse, error)) *MockGenClusterClient_GetClusterTopologyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterClient creates a new instance of MockClusterClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterClient {
	mock := &MockClusterClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClusterClient is an autogenerated mock type for the ClusterClient type
type MockClusterClient struct {
	mock.Mock
}

type MockClusterClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterClient) EXPECT() *MockClusterClient_Expecter {
	return &MockClusterClient_Expecter{mock: &_m.Mock}
}

// GetClusterTopology provides a mock function for the type MockClusterClient
func (_mock *MockClusterClient) GetClusterTopology(ctx context.Context) (cluster.Topology, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterTopology")
	}

	var r0 cluster.Topology
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (cluster.Topology, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) cluster.Topology); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(cluster.Topology)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClusterClient_GetClusterTopology_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterTopology'
type MockClusterClient_GetClusterTopology_Call struct {
	*mock.Call
}

// GetClusterTopology is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterClient_Expecter) GetClusterTopology(ctx interface{}) *MockClusterClient_GetClusterTopology_Call {
	return &MockClusterClient_GetClusterTopology_Call{Call: _e.mock.On("GetClusterTopology", ctx)}
}

func (_c *MockClusterClient_GetClusterTopology_Call) Run(run func(ctx context.Context)) *MockClusterClient_GetClusterTopology_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClusterClient_GetClusterTopology_Call) Return(topology cluster.Topology, err error) *MockClusterClient_GetClusterTopology_Call {
	_c.Call.Return(topology, err)
	return _c
}

func (_c *MockClusterClient_GetClusterTopology_Call) RunAndReturn(run func(ctx context.Context) (cluster.Topology, error)) *MockClusterClient_GetClusterTopology_Call {
	_c.Call.Return(run)
	return _c
}
