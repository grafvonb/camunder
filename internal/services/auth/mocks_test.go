// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"
	"io"

	"github.com/grafvonb/camunder/internal/api/gen/clients/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGenAuthClient creates a new instance of MockGenAuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenAuthClient {
	mock := &MockGenAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenAuthClient is an autogenerated mock type for the GenAuthClient type
type MockGenAuthClient struct {
	mock.Mock
}

type MockGenAuthClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenAuthClient) EXPECT() *MockGenAuthClient_Expecter {
	return &MockGenAuthClient_Expecter{mock: &_m.Mock}
}

// RequestTokenWithBodyWithResponse provides a mock function for the type MockGenAuthClient
func (_mock *MockGenAuthClient) RequestTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...auth.RequestEditorFn) (*auth.RequestTokenResponse, error) {
	var tmpRet mock.Arguments
	if len(reqEditors) > 0 {
		tmpRet = _mock.Called(ctx, contentType, body, reqEditors)
	} else {
		tmpRet = _mock.Called(ctx, contentType, body)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RequestTokenWithBodyWithResponse")
	}

	var r0 *auth.RequestTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...auth.RequestEditorFn) (*auth.RequestTokenResponse, error)); ok {
		return returnFunc(ctx, contentType, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...auth.RequestEditorFn) *auth.RequestTokenResponse); ok {
		r0 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RequestTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...auth.RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGenAuthClient_RequestTokenWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestTokenWithBodyWithResponse'
type MockGenAuthClient_RequestTokenWithBodyWithResponse_Call struct {
	*mock.Call
}

// RequestTokenWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...auth.RequestEditorFn
func (_e *MockGenAuthClient_Expecter) RequestTokenWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockGenAuthClient_RequestTokenWithBodyWithResponse_Call {
	return &MockGenAuthClient_RequestTokenWithBodyWithResponse_Call{Call: _e.mock.On("RequestTokenWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockGenAuthClient_RequestTokenWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...auth.RequestEditorFn)) *MockGenAuthClient_RequestTokenWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		var arg3 []auth.RequestEditorFn
		var variadicArgs []auth.RequestEditorFn
		if len(args) > 3 {
			variadicArgs = args[3].([]auth.RequestEditorFn)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockGenAuthClient_RequestTokenWithBodyWithResponse_Call) Return(requestTokenResponse *auth.RequestTokenResponse, err error) *MockGenAuthClient_RequestTokenWithBodyWithResponse_Call {
	_c.Call.Return(requestTokenResponse, err)
	return _c
}

func (_c *MockGenAuthClient_RequestTokenWithBodyWithResponse_Call) RunAndReturn(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...auth.RequestEditorFn) (*auth.RequestTokenResponse, error)) *MockGenAuthClient_RequestTokenWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthClient creates a new instance of MockAuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthClient {
	mock := &MockAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthClient is an autogenerated mock type for the AuthClient type
type MockAuthClient struct {
	mock.Mock
}

type MockAuthClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthClient) EXPECT() *MockAuthClient_Expecter {
	return &MockAuthClient_Expecter{mock: &_m.Mock}
}

// RetrieveTokenForAPI provides a mock function for the type MockAuthClient
func (_mock *MockAuthClient) RetrieveTokenForAPI(ctx context.Context, target string) (string, error) {
	ret := _mock.Called(ctx, target)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTokenForAPI")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, target)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, target)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthClient_RetrieveTokenForAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveTokenForAPI'
type MockAuthClient_RetrieveTokenForAPI_Call struct {
	*mock.Call
}

// RetrieveTokenForAPI is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
func (_e *MockAuthClient_Expecter) RetrieveTokenForAPI(ctx interface{}, target interface{}) *MockAuthClient_RetrieveTokenForAPI_Call {
	return &MockAuthClient_RetrieveTokenForAPI_Call{Call: _e.mock.On("RetrieveTokenForAPI", ctx, target)}
}

func (_c *MockAuthClient_RetrieveTokenForAPI_Call) Run(run func(ctx context.Context, target string)) *MockAuthClient_RetrieveTokenForAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthClient_RetrieveTokenForAPI_Call) Return(s string, err error) *MockAuthClient_RetrieveTokenForAPI_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthClient_RetrieveTokenForAPI_Call) RunAndReturn(run func(ctx context.Context, target string) (string, error)) *MockAuthClient_RetrieveTokenForAPI_Call {
	_c.Call.Return(run)
	return _c
}
